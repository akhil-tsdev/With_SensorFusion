03/16/15: cwati puts in more details
TODO: discuss about cbuf_full

It's possible that cbuf contains max number of timestamps, however
not all of these timestamps are already filled with data.
In that case cbuf_full can't be decided.

03/14/15: 65F has to be master when communicating with atheros wifi.

ACTIVE/START - normal process
STOP - stop collecting data
WAIT - continue collecting data, but stop sending to wifi

satellite ID to sensor IDX, kept in array
sat ID 0	----> 0   (sensor IDX 0 always belongs to local sensor)
sat ID 1	----> 1
...
sat ID N	----> MAX_SENSORS (num of sensors including self sensor)

record keeping, using cbuf
 * cbuf0: 	[timestamp0]
 * 		bitmap0, --> bit 'n' is set if sensor IDX 'n' has valid data
 * 		data[0]
		   |----sensor_record
		data[1]
		data[2] 
		... 
		data [MAX SENSORS]

 * cbuf1: 	[timestamp1],
 * 		bitmap1,
 * 		data[0], ... data[N]
 * ...
 * cbufN: 	[timestampN],
 *  		bitmapN,
 *  		data[0], ... data[N]
 *
 *  up to MAX_RECORDS_PER_TIMESTAMP

/***** FILLING UP CBUF *******/
Add it to the circular buffer for its satellite ID
adding_data_to_cbuf_based_on_sat_ID():
	map sat ID to sensor IDx

	for each incoming records
		find if timestamp entry is already in cbuf /* this function
		will create a new entry if timestamp not found */
		if found
			for that cbuf entry, set the bit for this sensor idx
				cbufN.bitmap0 |= (1 << sensor IDX)
		 	fill in data[sensor IDX] with sat ID and record
		if not found
			set cbuf FULL	

/***** TALK TO NORDIC *******/
communicate with nordic:
	forward command from Wifi (START, STOP, CALIB, SET RTC, SET SAT)
	the only thing that might differ is WAIT

	if cbuf is nearly full
	 	set command "WAIT"
	else 
		clear command "WAIT"

	call SPI to communicate, forwarding the most recent wifi command

	for datum in response:
		adding_data_to_cbuf_based_on_sat_ID()

/***** TALK TO WIFI *******/
communicate with wifi:
    if can_send:
    	reply with the top X timestamps, 
	each filled from the circular buffers that have it
    ask status, store as 'latest_wifi_command'

    /* RTC takes precedence */
    if SET RTC
    	ask sensor to set RTC
    	ask nordic to set RTC
    if CALIBRATE
    	ask sensor to calibrate
    if START:
    	set status as ACTIVE
    	set can_send
    if STOP:
    	set status->SLEEP
    if WAIT:
    	clear can_send
    if SET SATELLITE LIST
	update satellite list    	

/***** TALK TO SENSOR *******/
get_readings_from_invensense():
	send command to sensor
	for each record received back
	   adding_data_to_cbuf_based_on_sat_ID(SAT_ID = 0)
		

/***** MAIN *******/
Global:
initialize status->ACTIVE

main loop:
	communicate with wifi

	if status->SLEEP
		tell invensense to SLEEP
		communicate with nordic (to forward the SLEEP)

		while (status == SLEEP) {
		    /* Low power mode */
		    sleep for a while
		    communicate with wifi to get latest status
		}

		turn on invensense
		communicate with nordic (to forward the ACTIVE)

	if the circular buffer isn't full:
		get_readings_from_invensense()
		for each reading:
			process with sensor fusion
		add result to circular buffer

		communicate with nordic
		for each payload received add result to circular buffer



