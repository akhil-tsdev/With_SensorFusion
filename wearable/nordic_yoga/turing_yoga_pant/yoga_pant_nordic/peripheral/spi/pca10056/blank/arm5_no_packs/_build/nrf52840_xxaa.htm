<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52840_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52840_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Jan 30 08:50:58 2018
<BR><P>
<H3>Maximum Stack Usage =        608 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; fRunAccGyrSF &rArr; KF_predict &rArr; KF_predictionMatrix &rArr; projectionMatrix &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CCM_AAR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[4]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[10]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[b]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">RADIO_IRQHandler</a> from nrf_esb.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[18]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[16]">RTC0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">SWI0_EGU0_IRQHandler</a> from nrf_esb.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">SWI1_EGU1_IRQHandler</a> from app_timer.o(i.SWI1_EGU1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_nrf52840.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[17]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">TIMER0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">UARTE1_IRQHandler</a> from nrf_drv_uart.o(i.UARTE1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">USBD_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[39]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[36]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3b]">nrf_esb_event_handler</a> from main.o(i.nrf_esb_event_handler) referenced from main.o(i.esb_init)
 <LI><a href="#[40]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
 <LI><a href="#[40]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[41]">on_radio_disabled_tx_noack</a> from nrf_esb.o(i.on_radio_disabled_tx_noack) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[3f]">on_radio_disabled_tx_wait_for_ack</a> from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack) referenced from nrf_esb.o(i.on_radio_disabled_tx)
 <LI><a href="#[42]">serial_timeout_handler</a> from nrf_serial.o(i.serial_timeout_handler) referenced from nrf_serial.o(i.timeout_setup)
 <LI><a href="#[45]">sleep_handler</a> from main.o(i.sleep_handler) referenced from main.o(.constdata)
 <LI><a href="#[3c]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced from main.o(i.main)
 <LI><a href="#[3d]">uart_error_handle</a> from main.o(i.uart_error_handle) referenced from main.o(i.main)
 <LI><a href="#[3a]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[3e]">uart_event_handler</a> from nrf_serial.o(i.uart_event_handler) referenced from nrf_serial.o(i.nrf_serial_init)
 <LI><a href="#[44]">update_rf_payload_format_esb</a> from nrf_esb.o(i.update_rf_payload_format_esb) referenced from nrf_esb.o(i.update_radio_protocol)
 <LI><a href="#[43]">update_rf_payload_format_esb_dpl</a> from nrf_esb.o(i.update_rf_payload_format_esb_dpl) referenced from nrf_esb.o(i.update_radio_protocol)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[16f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[46]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[170]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[171]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[172]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[173]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[174]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[140]"></a>__asm___12_nrf_serial_c_dd1da960__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_serial.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_trylock
</UL>

<P><STRONG><a name="[175]"></a>__asm___12_nrf_serial_c_dd1da960__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_serial.o(.emb_text), UNUSED)

<P><STRONG><a name="[176]"></a>__asm___12_nrf_serial_c_dd1da960__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_serial.o(.emb_text), UNUSED)

<P><STRONG><a name="[177]"></a>__asm___12_nrf_serial_c_dd1da960__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_serial.o(.emb_text), UNUSED)

<P><STRONG><a name="[178]"></a>__asm___12_nrf_serial_c_dd1da960__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_serial.o(.emb_text), UNUSED)

<P><STRONG><a name="[179]"></a>__asm___12_nrf_serial_c_dd1da960__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_serial.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_setup
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeXupdt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotMatrixToQuaternion
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotMatrixToQuaternion
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaZYXToRotMatrix
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normVectorColumn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeXupdt
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotMatrixToQuaternion
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaZYXToRotMatrix
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normVectorColumn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeXupdt
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[180]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[181]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[182]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[184]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[50]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[a7]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[185]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[186]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[10a]"></a>Fusion_Init1</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, tasks.o(i.Fusion_Init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Fusion_Init1
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 564 bytes, Stack size 88 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>KF_alloc</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, kf.o(i.KF_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KF_alloc &rArr; matrixAllocFloat &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
</UL>

<P><STRONG><a name="[68]"></a>KF_computeK</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, kf.o(i.KF_computeK))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = KF_computeK &rArr; matInv &rArr; luDcmp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultTranspABAt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultTransp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMult
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matInv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_update
</UL>

<P><STRONG><a name="[6f]"></a>KF_computeXupdt</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, kf.o(i.KF_computeXupdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = KF_computeXupdt &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultConstant
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMult
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_update
</UL>

<P><STRONG><a name="[72]"></a>KF_init</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, kf.o(i.KF_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = KF_init &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMatrixZeros
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMatrixIdentity
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normVectorColumn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSubBlock
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCopy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultConstant
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_alloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[79]"></a>KF_predict</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, kf.o(i.KF_predict))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = KF_predict &rArr; KF_predictionMatrix &rArr; projectionMatrix &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultTranspABAt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matAdd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_uncertaintyPredictionMatrix
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predictionMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[7a]"></a>KF_predictionMatrix</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, kf.o(i.KF_predictionMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = KF_predictionMatrix &rArr; projectionMatrix &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMatrixZeros
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predict
</UL>

<P><STRONG><a name="[7b]"></a>KF_uncertaintyPredictionMatrix</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, kf.o(i.KF_uncertaintyPredictionMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = KF_uncertaintyPredictionMatrix &rArr; skewAntiSymm &rArr; setMatrixZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMatrixZeros
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skewAntiSymm
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predict
</UL>

<P><STRONG><a name="[7e]"></a>KF_update</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, kf.o(i.KF_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = KF_update &rArr; KF_computeK &rArr; matInv &rArr; luDcmp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normVectorColumn
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matSub
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matAdd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeXupdt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeK
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, nrf_esb.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler_spim &rArr; finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nrf_esb.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI1_EGU1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SWI1_EGU1_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52840.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, system_nrf52840.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_98
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_120
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_115
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_103
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>Triad</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, orientationcomputation.o(i.Triad))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Triad &rArr; rotMatrixToQuaternion &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotMatrixToQuaternion
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeVectorColumn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crossProduct3D
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSubBlock
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultTransp
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UARTE1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTE1_IRQHandler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[187]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[10f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[189]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a8]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[95]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[94]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
</UL>

<P><STRONG><a name="[98]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaZYXToRotMatrix
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
</UL>

<P><STRONG><a name="[105]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
</UL>

<P><STRONG><a name="[77]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
</UL>

<P><STRONG><a name="[a9]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaZYXToRotMatrix
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
</UL>

<P><STRONG><a name="[aa]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotMatrixToQuaternion
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normVectorColumn
</UL>

<P><STRONG><a name="[9c]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[9e]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[a5]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9d]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[a0]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[9b]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[9f]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[9a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[a1]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[97]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[96]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[18a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[99]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[b2]"></a>app_error_fault_handler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[b1]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handle
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>

<P><STRONG><a name="[b3]"></a>app_fifo_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[bd]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[b6]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[15b]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_setup
</UL>

<P><STRONG><a name="[b8]"></a>app_timer_start</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_setup
</UL>

<P><STRONG><a name="[ba]"></a>app_timer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_write
</UL>

<P><STRONG><a name="[bc]"></a>app_uart_init</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>app_uart_put</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250_set_csn
</UL>

<P><STRONG><a name="[c5]"></a>app_util_critical_region_enter</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
</UL>

<P><STRONG><a name="[c7]"></a>app_util_critical_region_exit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
</UL>

<P><STRONG><a name="[c6]"></a>app_util_disable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[c8]"></a>app_util_enable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[d1]"></a>bsp_board_led_invert</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[d5]"></a>bsp_board_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[109]"></a>clocks_start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.clocks_start))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>crossProduct3D</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, matrixcomputations.o(i.crossProduct3D))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triad
</UL>

<P><STRONG><a name="[e1]"></a>eaZYXToRotMatrix</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, orientationcomputation.o(i.eaZYXToRotMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = eaZYXToRotMatrix &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[e2]"></a>esb_init</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, main.o(i.esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = esb_init &rArr; nrf_esb_set_prefixes &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>fRunAccGyrSF</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, orientationcomputation.o(i.fRunAccGyrSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = fRunAccGyrSF &rArr; KF_predict &rArr; KF_predictionMatrix &rArr; projectionMatrix &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateVectorRotMatrix
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projVector
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRefFrame
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaZYXToRotMatrix
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triad
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeVectorColumn
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCopy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_update
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predict
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = fputc &rArr; nrf_serial_write &rArr; serial_tx &rArr; nrf_queue_in &rArr; queue_write &rArr; nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[116]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFree
</UL>

<P><STRONG><a name="[e8]"></a>initRefFrame</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, orientationcomputation.o(i.initRefFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = initRefFrame &rArr; normalizeVectorColumn &rArr; normVectorColumn &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeVectorColumn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSubBlock
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMult
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skewAntiSymm
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[fe]"></a>lsm6dsl_detect_sensor</STRONG> (Thumb, 40 bytes, Stack size 112 bytes, lsm6dsl_firmware.o(i.lsm6dsl_detect_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lsm6dsl_detect_sensor &rArr; read_regs &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mpu9250_sensor_num
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>lsm6dsl_init_regs</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lsm6dsl_firmware.o(i.lsm6dsl_init_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lsm6dsl_init_regs &rArr; write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>lsm6dsl_read</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lsm6dsl_firmware.o(i.lsm6dsl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lsm6dsl_read &rArr; read_regs &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>luBksb</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, matrixcomputations.o(i.luBksb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luBksb
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matInv
</UL>

<P><STRONG><a name="[104]"></a>luDcmp</STRONG> (Thumb, 728 bytes, Stack size 104 bytes, matrixcomputations.o(i.luDcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = luDcmp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matInv
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 856 bytes, Stack size 104 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = main &rArr; fRunAccGyrSF &rArr; KF_predict &rArr; KF_predictionMatrix &rArr; projectionMatrix &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRefFrameStaticToZero
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setKFStaticToZero
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_init_regs
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_detect_sensor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fusion_Init1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleReset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[114]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocInt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
</UL>

<P><STRONG><a name="[6a]"></a>matAdd</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, matrixcomputations.o(i.matAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = matAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_update
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predict
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeK
</UL>

<P><STRONG><a name="[6b]"></a>matInv</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, matrixcomputations.o(i.matInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = matInv &rArr; luDcmp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeInt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocInt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luBksb
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCopy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeK
</UL>

<P><STRONG><a name="[6e]"></a>matMult</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, matrixcomputations.o(i.matMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = matMult
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projVector
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRefFrame
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_update
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predict
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeXupdt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeK
</UL>

<P><STRONG><a name="[70]"></a>matMultConstant</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, matrixcomputations.o(i.matMultConstant))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matMultConstant
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeXupdt
</UL>

<P><STRONG><a name="[6d]"></a>matMultTransp</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, matrixcomputations.o(i.matMultTransp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = matMultTransp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triad
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeK
</UL>

<P><STRONG><a name="[69]"></a>matMultTranspABAt</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, matrixcomputations.o(i.matMultTranspABAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = matMultTranspABAt &rArr; matrixAllocFloat &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predict
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeK
</UL>

<P><STRONG><a name="[7f]"></a>matSub</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, matrixcomputations.o(i.matSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = matSub
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_update
</UL>

<P><STRONG><a name="[67]"></a>matrixAllocFloat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, matrixcomputations.o(i.matrixAllocFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = matrixAllocFloat &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projVector
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRefFrame
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triad
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultTranspABAt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matInv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predict
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeXupdt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeK
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_alloc
</UL>

<P><STRONG><a name="[111]"></a>matrixAllocInt</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, matrixcomputations.o(i.matrixAllocInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = matrixAllocInt &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matInv
</UL>

<P><STRONG><a name="[78]"></a>matrixCopy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, matrixcomputations.o(i.matrixCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matrixCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matInv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
</UL>

<P><STRONG><a name="[115]"></a>matrixFree</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, matrixcomputations.o(i.matrixFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = matrixFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeInt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
</UL>

<P><STRONG><a name="[6c]"></a>matrixFreeFloat</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, matrixcomputations.o(i.matrixFreeFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = matrixFreeFloat &rArr; matrixFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFree
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projVector
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRefFrame
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triad
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luDcmp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultTranspABAt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matInv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predict
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeXupdt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_computeK
</UL>

<P><STRONG><a name="[113]"></a>matrixFreeInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, matrixcomputations.o(i.matrixFreeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = matrixFreeInt &rArr; matrixFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matInv
</UL>

<P><STRONG><a name="[75]"></a>matrixSubBlock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, matrixcomputations.o(i.matrixSubBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = matrixSubBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRefFrame
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triad
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
</UL>

<P><STRONG><a name="[117]"></a>mpu9250_set_csn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mpu9250.o(i.mpu9250_set_csn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpu9250_set_csn &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>

<P><STRONG><a name="[76]"></a>normVectorColumn</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, matrixcomputations.o(i.normVectorColumn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = normVectorColumn &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeVectorColumn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_update
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
</UL>

<P><STRONG><a name="[8e]"></a>normalizeVectorColumn</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, matrixcomputations.o(i.normalizeVectorColumn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = normalizeVectorColumn &rArr; normVectorColumn &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normVectorColumn
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projVector
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRefFrame
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triad
</UL>

<P><STRONG><a name="[f6]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[108]"></a>nrf_drv_spi_init</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_enable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>

<P><STRONG><a name="[11d]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[bf]"></a>nrf_drv_uart_init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[c1]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_disable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[c0]"></a>nrf_drv_uart_rx_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_uart_rx_enable &rArr; rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[c4]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uarte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[c3]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[12d]"></a>nrf_esb_disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[3b]"></a>nrf_esb_event_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.nrf_esb_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_event_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_tx
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.esb_init)
</UL>
<P><STRONG><a name="[12f]"></a>nrf_esb_flush_tx</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_flush_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_flush_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
</UL>

<P><STRONG><a name="[e3]"></a>nrf_esb_init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_init &rArr; initialize_fifos
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_fifos
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[131]"></a>nrf_esb_read_rx_payload</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_read_rx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_read_rx_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
</UL>

<P><STRONG><a name="[e4]"></a>nrf_esb_set_base_address_0</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_set_base_address_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_set_base_address_0 &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_address_workarounds
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[e5]"></a>nrf_esb_set_base_address_1</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_set_base_address_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_set_base_address_1 &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_address_workarounds
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[e6]"></a>nrf_esb_set_prefixes</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_set_prefixes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_set_prefixes &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_address_workarounds
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[130]"></a>nrf_esb_start_tx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_start_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_start_tx &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
</UL>

<P><STRONG><a name="[10e]"></a>nrf_esb_write_payload</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_write_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>nrf_queue_available_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_available_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
</UL>

<P><STRONG><a name="[143]"></a>nrf_queue_in</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, nrf_queue.o(i.nrf_queue_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nrf_queue_in &rArr; queue_write &rArr; nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[145]"></a>nrf_queue_out</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_queue.o(i.nrf_queue_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_queue_out &rArr; queue_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[148]"></a>nrf_queue_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_queue_reset &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_init
</UL>

<P><STRONG><a name="[142]"></a>nrf_queue_utilization_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
</UL>

<P><STRONG><a name="[107]"></a>nrf_serial_init</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, nrf_serial.o(i.nrf_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_serial_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>nrf_serial_write</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, nrf_serial.o(i.nrf_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_serial_write &rArr; serial_tx &rArr; nrf_queue_in &rArr; queue_write &rArr; nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_setup
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_trylock
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[eb]"></a>projVector</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, orientationcomputation.o(i.projVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = projVector &rArr; projectionMatrix &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeVectorColumn
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMatrixZeros
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[7c]"></a>projectionMatrix</STRONG> (Thumb, 438 bytes, Stack size 88 bytes, kf.o(i.projectionMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = projectionMatrix &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normVectorColumn
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixCopy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMultConstant
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matMult
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matAdd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skewAntiSymm
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projVector
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predictionMatrix
</UL>

<P><STRONG><a name="[100]"></a>read_regs</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mpu9250.o(i.read_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read_regs &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250_set_csn
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_detect_sensor
</UL>

<P><STRONG><a name="[8f]"></a>rotMatrixToQuaternion</STRONG> (Thumb, 480 bytes, Stack size 120 bytes, orientationcomputation.o(i.rotMatrixToQuaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rotMatrixToQuaternion &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triad
</UL>

<P><STRONG><a name="[ea]"></a>rotateVectorRotMatrix</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, orientationcomputation.o(i.rotateVectorRotMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rotateVectorRotMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[10b]"></a>setKFStaticToZero</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, multichipkf.o(i.setKFStaticToZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setKFStaticToZero
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>setMatrixIdentity</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, matrixcomputations.o(i.setMatrixIdentity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setMatrixIdentity
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
</UL>

<P><STRONG><a name="[74]"></a>setMatrixZeros</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, matrixcomputations.o(i.setMatrixZeros))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setMatrixZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projVector
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skewAntiSymm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_uncertaintyPredictionMatrix
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_predictionMatrix
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_init
</UL>

<P><STRONG><a name="[10c]"></a>setRefFrameStaticToZero</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, multichipkf.o(i.setRefFrameStaticToZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setRefFrameStaticToZero
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>set_mpu9250_sensor_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.set_mpu9250_sensor_num))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_detect_sensor
</UL>

<P><STRONG><a name="[15a]"></a>sgn</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, orientationcomputation.o(i.sgn))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiltAngles
</UL>

<P><STRONG><a name="[7d]"></a>skewAntiSymm</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, kf.o(i.skewAntiSymm))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = skewAntiSymm &rArr; setMatrixZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMatrixZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRefFrame
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projectionMatrix
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF_uncertaintyPredictionMatrix
</UL>

<P><STRONG><a name="[3c]"></a>spi_event_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.spi_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[a2]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e9]"></a>tiltAngles</STRONG> (Thumb, 424 bytes, Stack size 96 bytes, orientationcomputation.o(i.tiltAngles))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tiltAngles &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeVectorColumn
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixFreeFloat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixAllocFloat
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRunAccGyrSF
</UL>

<P><STRONG><a name="[3d]"></a>uart_error_handle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.uart_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_error_handle &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[102]"></a>write_reg</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mpu9250.o(i.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_reg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250_set_csn
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_init_regs
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[110]"></a>nrf_delay_us</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, main.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>simpleReset</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, main.o(i.simpleReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = simpleReset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>sleep_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.sleep_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[d2]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>

<P><STRONG><a name="[d4]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>

<P><STRONG><a name="[61]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
</UL>

<P><STRONG><a name="[60]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[5f]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>finish_transfer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[81]"></a>irq_handler_spim</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.irq_handler_spim))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler_spim &rArr; finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[119]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[11a]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[118]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[13b]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[ee]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[f9]"></a>nrf_spim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[fa]"></a>nrf_spim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.nrf_spim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[158]"></a>nrf_spim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[11b]"></a>nrf_spim_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[157]"></a>nrf_spim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[11e]"></a>spim_xfer</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[c9]"></a>apply_config</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_txrx_pins_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_hwfc_pins_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[f2]"></a>interrupts_enable</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[f5]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[11f]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[123]"></a>nrf_drv_uart_rx_for_uart</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[122]"></a>nrf_drv_uart_rx_for_uarte</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_for_uarte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_uart_rx_for_uarte &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[12b]"></a>nrf_drv_uart_tx_for_uart</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_uart_tx_for_uart &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[12a]"></a>nrf_drv_uart_tx_for_uarte</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_for_uarte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_uart_tx_for_uarte &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[13c]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[cc]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[cb]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[13d]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[ca]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[166]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[125]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[f7]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[d0]"></a>nrf_uart_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[121]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[f8]"></a>nrf_uart_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[165]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[127]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[cf]"></a>nrf_uart_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[169]"></a>nrf_uarte_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[129]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uarte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
</UL>

<P><STRONG><a name="[f3]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uarte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[ce]"></a>nrf_uarte_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[120]"></a>nrf_uarte_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[f4]"></a>nrf_uarte_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[16a]"></a>nrf_uarte_rx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_rx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[128]"></a>nrf_uarte_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uarte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
</UL>

<P><STRONG><a name="[cd]"></a>nrf_uarte_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[126]"></a>rx_byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[167]"></a>rx_done_event</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[124]"></a>rx_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[12c]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[168]"></a>tx_done_event</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[91]"></a>uart_irq_handler</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>uarte_irq_handler</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_rx_amount_get
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[b4]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[ec]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[b7]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[163]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[3a]"></a>uart_event_handler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[164]"></a>event_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_serial.o(i.event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[149]"></a>nrf_mtx_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_serial.o(i.nrf_mtx_init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_init
</UL>

<P><STRONG><a name="[13f]"></a>nrf_mtx_trylock</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrf_serial.o(i.nrf_mtx_trylock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_mtx_trylock
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_serial_c_dd1da960__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_write
</UL>

<P><STRONG><a name="[14b]"></a>nrf_mtx_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_serial.o(i.nrf_mtx_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_write
</UL>

<P><STRONG><a name="[42]"></a>serial_timeout_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_serial.o(i.serial_timeout_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_serial.o(i.timeout_setup)
</UL>
<P><STRONG><a name="[14c]"></a>serial_tx</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nrf_serial.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = serial_tx &rArr; nrf_queue_in &rArr; queue_write &rArr; nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_write
</UL>

<P><STRONG><a name="[14d]"></a>sleep_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_serial.o(i.sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleep_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_write
</UL>

<P><STRONG><a name="[14a]"></a>timeout_setup</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, nrf_serial.o(i.timeout_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timeout_setup &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_serial_write
</UL>

<P><STRONG><a name="[3e]"></a>uart_event_handler</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nrf_serial.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_serial.o(i.nrf_serial_init)
</UL>
<P><STRONG><a name="[152]"></a>nrf_queue_next_idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
</UL>

<P><STRONG><a name="[147]"></a>queue_read</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, nrf_queue.o(i.queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queue_read
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
</UL>

<P><STRONG><a name="[146]"></a>queue_utilization_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_out
</UL>

<P><STRONG><a name="[144]"></a>queue_write</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, nrf_queue.o(i.queue_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = queue_write &rArr; nrf_queue_available_get &rArr; nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_in
</UL>

<P><STRONG><a name="[154]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[155]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[15f]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[d9]"></a>compare_reg_update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[15c]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[15d]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[fb]"></a>list_insertions_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[de]"></a>nrf_delay_us</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[dd]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[da]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[dc]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[e0]"></a>rtc1_stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[db]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[162]"></a>timeout_handler_exec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_handler_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[83]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_EGU1_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[fd]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[fc]"></a>timer_list_remove</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[b9]"></a>timer_start_op_schedule</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[bb]"></a>timer_stop_op_schedule</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[80]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[160]"></a>user_op_alloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[161]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[153]"></a>nrf_delay_us</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, mpu9250.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>

<P><STRONG><a name="[159]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>

<P><STRONG><a name="[12e]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
</UL>

<P><STRONG><a name="[132]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>

<P><STRONG><a name="[14f]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
</UL>

<P><STRONG><a name="[136]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_esb.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[af]"></a>addr_conv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_esb.o(i.addr_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>

<P><STRONG><a name="[139]"></a>apply_address_workarounds</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_esb.o(i.apply_address_workarounds))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>

<P><STRONG><a name="[b0]"></a>bytewise_bit_swap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_esb.o(i.bytewise_bit_swap))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>

<P><STRONG><a name="[f0]"></a>initialize_fifos</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_esb.o(i.initialize_fifos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initialize_fifos
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[82]"></a>nrf_esb_get_clear_interrupts</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_get_clear_interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>on_radio_disabled_tx</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_radio_disabled_tx
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
<LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[41]"></a>on_radio_disabled_tx_noack</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_noack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_radio_disabled_tx_noack &rArr; tx_fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[3f]"></a>on_radio_disabled_tx_wait_for_ack</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_radio_disabled_tx_wait_for_ack &rArr; rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx)
</UL>
<P><STRONG><a name="[135]"></a>ppi_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_esb.o(i.ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[f1]"></a>reset_fifos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_esb.o(i.reset_fifos))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_fifos
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[150]"></a>rx_fifo_push_rfbuf</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, nrf_esb.o(i.rx_fifo_push_rfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
</UL>

<P><STRONG><a name="[13a]"></a>start_tx_transaction</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, nrf_esb.o(i.start_tx_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_tx
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
</UL>

<P><STRONG><a name="[134]"></a>sys_timer_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_esb.o(i.sys_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[14e]"></a>tx_fifo_remove_last</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_esb.o(i.tx_fifo_remove_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
</UL>

<P><STRONG><a name="[138]"></a>update_radio_addresses</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>

<P><STRONG><a name="[16c]"></a>update_radio_bitrate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_bitrate))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[16e]"></a>update_radio_crc</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_crc))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[133]"></a>update_radio_parameters</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_radio_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_tx_power
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_protocol
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_crc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_bitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[16d]"></a>update_radio_protocol</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[16b]"></a>update_radio_tx_power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[44]"></a>update_rf_payload_format_esb</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_protocol)
</UL>
<P><STRONG><a name="[43]"></a>update_rf_payload_format_esb_dpl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb_dpl))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_protocol)
</UL>
<P><STRONG><a name="[87]"></a>errata_103</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_103))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[88]"></a>errata_115</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_115))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[89]"></a>errata_120</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_120))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8a]"></a>errata_136</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[84]"></a>errata_36</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[85]"></a>errata_66</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[86]"></a>errata_98</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_98))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ab]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[93]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[ad]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
