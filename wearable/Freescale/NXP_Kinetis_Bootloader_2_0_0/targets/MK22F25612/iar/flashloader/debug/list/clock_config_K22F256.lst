###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       16/Aug/2016  13:15:52
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\src\clock_config_K22F256.c
#    Command line =  
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\src\clock_config_K22F256.c"
#        -D DEBUG -D NDEBUG -D USB_STACK_BM -D CPU_MK22FN256VDC12 -D
#        CPU_IS_ARM_CORTEX_M4=1 -D IAR -D BL_TARGET_RAM -lC
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader\debug\list"
#        --diag_suppress Pa039,Pe068,Pe069,Pa082,Pe177,Pe186,Pe550,Pa050 -o
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader\debug\obj"
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../src\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../src/startup\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/platform/devices/MK22F25612\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/autobaud\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/usb/include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/usb/osa\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/usb/device\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/usb/device/class\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/bm_usb\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/platform\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/platform/devices\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/platform/CMSIS/Include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/drivers\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/startup\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/drivers/common\"
#        -Ohz --use_c++_inline
#    Locale       =  C
#    List file    =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader\debug\list\clock_config_K22F256.lst
#    Object file  =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader\debug\obj\clock_config_K22F256.o
#
###############################################################################

C:\Users\cwati\Documents\My Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\src\clock_config_K22F256.c
      1          /*
      2           * Copyright (c) 2014-2015, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "bootloader_common.h"
     32          #include "bootloader/bl_context.h"
     33          #include "property/property.h"
     34          #include "fsl_device_registers.h"
     35          #include "utilities/fsl_assert.h"
     36          
     37          ////////////////////////////////////////////////////////////////////////////////
     38          // Definitions
     39          ////////////////////////////////////////////////////////////////////////////////
     40          
     41          // Clock mode types
     42          typedef enum _target_clock_mode
     43          {
     44              kClockMode_FEI = 0,
     45              kClockMode_FEE = 1,
     46              kClockMode_Default = kClockMode_FEI,
     47          } target_clock_mode_t;
     48          
     49          ////////////////////////////////////////////////////////////////////////////////
     50          // Prototypes
     51          ////////////////////////////////////////////////////////////////////////////////
     52          
     53          // This function implements clock mode switch between FEI and PEE mode used in this bootloader
     54          void clock_mode_switch(const target_clock_mode_t currentMode, const target_clock_mode_t expectedMode);
     55          
     56          ////////////////////////////////////////////////////////////////////////////////
     57          // Code
     58          ////////////////////////////////////////////////////////////////////////////////
     59          
     60          // See bootloader_common.h for documentation on this function.

   \                                 In section .text, align 2, keep-with-next
     61          void configure_clocks(bootloader_clock_option_t option)
     62          {
     63          #if BL_TARGET_FLASH
     64          
     65              static target_clock_mode_t s_currentClockMode = kClockMode_FEI;
     66              static uint32_t s_defaultClockDivider;
     67          
     68              if (option == kClockOption_EnterBootloader)
     69              {
     70                  s_defaultClockDivider = SIM->CLKDIV1;
     71          
     72                  // General procedure to be implemented:
     73                  // 1. Read clock flags and divider from bootloader config in property store
     74                  bootloader_configuration_data_t *config = &g_bootloaderContext.propertyInterface->store->configurationData;
     75                  uint8_t options = config->clockFlags;
     76          
     77                  // Check if the USB HID peripheral is enabled. If it is enabled, we always
     78                  // use the 48MHz IRC.
     79                  bool isUsbEnabled = config->enabledPeripherals & kPeripheralType_USB_HID;
     80          
     81                  // 2. If NOT High Speed and USB isn't enabled, do nothing (use reset clock config)
     82                  if ((options & kClockFlag_HighSpeed) && (!isUsbEnabled))
     83                  {
     84                      // Get actual Core clock.
     85                      SystemCoreClock =
     86                          kDefaultClock / (((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT) + 1);
     87          
     88                      // High speed flag is set (meaning disabled), so just use default clocks.
     89                      return;
     90                  }
     91          
     92                  // 3. Set OUTDIV1 based on divider in config. OUTDIV4 starts out at /1.
     93                  // The divider values are masked by the maximum bits per divider.
     94                  uint32_t div1 = ((~config->clockDivider) & (SIM_CLKDIV1_OUTDIV1_MASK >> SIM_CLKDIV1_OUTDIV1_SHIFT)) + 1;
     95          
     96                  // 4. Get MCGOUTCLK
     97                  uint32_t McgOutClk = kHIRC;
     98          
     99                  // 5. Keep core clock up kMinCoreClockWithUsbSupport if usb is supported.
    100                  uint32_t freq = McgOutClk;
    101                  // If USB is enabled, the CPU clock must not be allowed to go below 20 MHz
    102                  if (isUsbEnabled)
    103                  {
    104                      while ((freq / div1) < kMinCoreClockWithUsbSupport)
    105                      {
    106                          --div1;
    107                      }
    108                  }
    109          
    110                  // 6. Keep core clock below kMaxCoreClock
    111                  while ((freq / div1) > kMaxCoreClock)
    112                  {
    113                      ++div1;
    114                  }
    115          
    116                  assert((div1 >= kDivider_Min) && (div1 <= kDivider_Max));
    117          
    118                  uint32_t div2 = div1;
    119                  uint32_t div4 = div1;
    120          
    121                  // 7. Keep bus freq below max.
    122                  //
    123                  // The bus clock is divided by OUTDIV2:
    124                  //      MCGOUTCLK -> OUTDIV2 -> bus_clk
    125                  freq = McgOutClk;
    126                  while ((freq / div2) > kMaxBusClock)
    127                  {
    128                      // Increase bus clock divider.
    129                      ++div2;
    130                  }
    131                  assert((div2 >= kDivider_Min) && (div2 <= kDivider_Max));
    132          
    133                  // 8. Keep flash freq below max.
    134                  //
    135                  // The flash clock is diveded by OUTDIV4:
    136                  //      MCGOUTCLK -> OUTDIV4 ->flash_clk
    137                  freq = McgOutClk;
    138                  while ((freq / div4) > kMaxFlashClock)
    139                  {
    140                      // Increase bus/flash clock divider.
    141                      ++div4;
    142                  }
    143                  assert((div4 >= kDivider_Min) && (div4 <= kDivider_Max));
    144          
    145                  if ((div1 == 1) && ((div2 > 8) || (div4 > 8)))
    146                  {
    147                      return;
    148                  }
    149          
    150                  // 9. Now set the dividers
    151                  SIM->CLKDIV1 = SIM_CLKDIV1_OUTDIV1(div1 - 1) | SIM_CLKDIV1_OUTDIV2(div2 - 1) |
    152                                 SIM_CLKDIV1_OUTDIV4(div4 - 1); /* Update system prescalers */
    153          
    154                  // 10. Update SystemCoreClock global.
    155                  SystemCoreClock = McgOutClk / div1;
    156          
    157                  clock_mode_switch(s_currentClockMode, kClockMode_FEE);
    158                  s_currentClockMode = kClockMode_FEE;
    159              }
    160              else if (option == kClockOption_ExitBootloader)
    161              {
    162                  // Restore from FEE mode to FEI mode
    163                  clock_mode_switch(s_currentClockMode, kClockMode_FEI);
    164          
    165                  // Restore clock divider
    166                  SIM->CLKDIV1 = s_defaultClockDivider;
    167              }
    168          
    169          #endif // BL_TARGET_FLASH
    170          }
   \                     configure_clocks: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    171          

   \                                 In section .text, align 2, keep-with-next
    172          void clock_mode_switch(const target_clock_mode_t currentMode, const target_clock_mode_t expectedMode)
    173          {
    174              // Note: here only implements clock switch between FEI and FEE,
    175              // The other modes are not supported.
    176              assert(currentMode == kClockMode_FEE || currentMode == kClockMode_FEI);
    177              assert(expectedMode == kClockMode_FEE || expectedMode == kClockMode_FEI);
    178          
    179              if (currentMode == expectedMode)
   \                     clock_mode_switch: (+1)
   \   00000000   0x4288             CMP      R0,R1
   \   00000002   0xD030             BEQ.N    ??clock_mode_switch_0
    180              {
    181                  return;
    182              }
    183          
    184              if (expectedMode == kClockMode_FEE)
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0x....             LDR.N    R0,??DataTable0  ;; 0x40064000
   \   00000008   0xD11B             BNE.N    ??clock_mode_switch_1
    185              {
    186                  uint8_t tmp;
    187                  /* Switch to FEE mode */
    188                  tmp = MCG->C2;
   \   0000000A   0x7841             LDRB     R1,[R0, #+1]
    189                  tmp &= (uint8_t)~MCG_C2_RANGE_MASK;
    190                  tmp |= MCG_C2_RANGE(2);
    191                  MCG->C2 = tmp; /* MCG_C2: RANGE = 2 */
   \   0000000C   0xF001 0x01CF      AND      R1,R1,#0xCF
   \   00000010   0xF041 0x0120      ORR      R1,R1,#0x20
   \   00000014   0x7041             STRB     R1,[R0, #+1]
    192          
    193                  tmp = MCG->C1;
   \   00000016   0x7801             LDRB     R1,[R0, #+0]
    194                  tmp &= (uint8_t) ~(MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK);
    195                  tmp |= MCG_C1_FRDIV(6);
    196                  MCG->C1 = tmp; // FRDIV=6, RANGE=2, divide IRC48M with 1280, switch to external reference clock.
   \   00000018   0xF001 0x01C3      AND      R1,R1,#0xC3
   \   0000001C   0xF041 0x0130      ORR      R1,R1,#0x30
   \   00000020   0x7001             STRB     R1,[R0, #+0]
    197          
    198                  tmp = MCG->C4;
   \   00000022   0x78C1             LDRB     R1,[R0, #+3]
    199                  tmp &= (uint8_t)~MCG_C4_DRST_DRS_MASK;
    200                  tmp |= MCG_C4_DRST_DRS(1);
    201                  MCG->C4 = tmp; // Multiply with 1280, MCGOUTCLK is 48Mhz
   \   00000024   0xF001 0x019F      AND      R1,R1,#0x9F
   \   00000028   0xF041 0x0120      ORR      R1,R1,#0x20
   \   0000002C   0x70C1             STRB     R1,[R0, #+3]
    202          
    203                  tmp = MCG->C7;
   \   0000002E   0x7B01             LDRB     R1,[R0, #+12]
    204                  tmp &= (uint8_t)~MCG_C7_OSCSEL_MASK;
    205                  tmp |= MCG_C7_OSCSEL(2);
    206                  MCG->C7 = tmp; // Select IRC48M as Oscillator.
   \   00000030   0xF001 0x01FC      AND      R1,R1,#0xFC
   \   00000034   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000038   0x7301             STRB     R1,[R0, #+12]
    207          
    208                  while (MCG->S & MCG_S_IREFST_MASK)
   \                     ??clock_mode_switch_2: (+1)
   \   0000003A   0x7981             LDRB     R1,[R0, #+6]
   \   0000003C   0x06C9             LSLS     R1,R1,#+27
   \   0000003E   0xD4FC             BMI.N    ??clock_mode_switch_2
   \   00000040   0x4770             BX       LR
    209                      ; // Wait until external reference clock is ready.
    210              }
    211              else if (expectedMode == kClockMode_FEI)
   \                     ??clock_mode_switch_1: (+1)
   \   00000042   0xB981             CBNZ.N   R1,??clock_mode_switch_0
    212              {
    213                  MCG->C1 |= MCG_C1_IREFS_MASK; // Switch to internal reference clock.
   \   00000044   0x7801             LDRB     R1,[R0, #+0]
   \   00000046   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000004A   0x7001             STRB     R1,[R0, #+0]
    214                  while (!(MCG->S & MCG_S_IREFST_MASK))
   \                     ??clock_mode_switch_3: (+1)
   \   0000004C   0x7981             LDRB     R1,[R0, #+6]
   \   0000004E   0x06C9             LSLS     R1,R1,#+27
   \   00000050   0xD5FC             BPL.N    ??clock_mode_switch_3
    215                      ; // Wait until internal reference clock is ready.
    216          
    217                  // Restore registers to default value out of reset.
    218                  MCG->C1 = 0x04U;
   \   00000052   0x2104             MOVS     R1,#+4
   \   00000054   0x7001             STRB     R1,[R0, #+0]
    219                  MCG->C2 = 0x80U;
   \   00000056   0x2180             MOVS     R1,#+128
   \   00000058   0x7041             STRB     R1,[R0, #+1]
    220          
    221                  MCG->C4 &= (uint8_t)MCG_C4_DRST_DRS_MASK;
   \   0000005A   0x78C1             LDRB     R1,[R0, #+3]
   \   0000005C   0xF001 0x0160      AND      R1,R1,#0x60
   \   00000060   0x70C1             STRB     R1,[R0, #+3]
    222                  MCG->C7 = 0;
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x7301             STRB     R1,[R0, #+12]
    223              }
    224          }
   \                     ??clock_mode_switch_0: (+1)
   \   00000066   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40064000         DC32     0x40064000
    225          
    226          ////////////////////////////////////////////////////////////////////////////////
    227          // EOF
    228          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   clock_mode_switch
       0   configure_clocks


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
     104  clock_mode_switch
       2  configure_clocks

 
 110 bytes in section .text
 
 110 bytes of CODE memory

Errors: none
Warnings: none
