###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       16/Aug/2016  15:48:55
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\bm_usb\hid_bootloader.c
#    Command line =  
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\bm_usb\hid_bootloader.c"
#        -D DEBUG -D NDEBUG -D USB_STACK_BM -D CPU_MK22FN512VDC12 -D
#        CPU_IS_ARM_CORTEX_M4=1 -D IAR -D FREEDOM -D BL_TARGET_FLASH -lC
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader\debug\list"
#        --diag_suppress Pa039,Pe068,Pe069,Pa082,Pe177,Pe186,Pe550,Pa050 -o
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader\debug\obj"
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../src\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../src/startup\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/platform/devices/MK22F51212\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/autobaud\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb/include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb/osa\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb/device\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb/device/class\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/bm_usb\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/platform\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/platform/devices\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/platform/CMSIS/Include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/startup\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers/common\"
#        -Ohz --use_c++_inline
#    Locale       =  C
#    List file    =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader\debug\list\hid_bootloader.lst
#    Object file  =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F51212\iar\freedom_bootloader\debug\obj\hid_bootloader.o
#
###############################################################################

C:\Users\cwati\Documents\My Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\bm_usb\hid_bootloader.c
      1          /*
      2           * Copyright (c) 2015, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "usb_device_config.h"
     32          #include "usb.h"
     33          #include "usb_device.h"
     34          
     35          #include "usb_device_class.h"
     36          #include "usb_device_hid.h"
     37          #include "usb_device_ch9.h"
     38          #include "usb_descriptor.h"
     39          #include "hid_bootloader.h"
     40          
     41          #include "fsl_device_registers.h"
     42          #include "bootloader_hid_report_ids.h"
     43          #include "utilities/fsl_rtos_abstraction.h"
     44          
     45          #include <stdio.h>
     46          #include <stdlib.h>
     47          #include <string.h>
     48          
     49          #include "composite.h"
     50          
     51          #if (BL_CONFIG_USB_HID || BL_CONFIG_HS_USB_HID)
     52          
     53          /*******************************************************************************
     54           * Variables
     55           ******************************************************************************/
     56          extern usb_device_endpoint_struct_t g_hid_generic_endpoints[];

   \                                 In section .bss, align 4
     57          static usb_device_composite_struct_t *g_device_composite;
   \                     g_device_composite:
   \   00000000                      DS8 4
     58          
     59          /* The hid class callback */

   \                                 In section .text, align 4, keep-with-next
     60          usb_status_t usb_device_hid_generic_callback(class_handle_t handle, uint32_t event, void *param)
     61          {
   \                     usb_device_hid_generic_callback: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     62              usb_status_t error = kStatus_USB_Error;
     63          
     64              usb_device_hid_report_struct_t *hid_report_param;
     65          
     66              hid_report_param = (usb_device_hid_report_struct_t *)param;
     67          
     68              const bl_hid_header_t *header;
     69          
     70              switch (event)
   \   00000002   0x....             LDR.N    R7,??DataTable4
   \   00000004   0x2501             MOVS     R5,#+1
   \   00000006   0x1E49             SUBS     R1,R1,#+1
   \   00000008   0x683C             LDR      R4,[R7, #+0]
   \   0000000A   0x2908             CMP      R1,#+8
   \   0000000C   0x4616             MOV      R6,R2
   \   0000000E   0xD858             BHI.N    ??usb_device_hid_generic_callback_1
   \   00000010   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??usb_device_hid_generic_callback_0:
   \   00000014   0x05 0x17          DC8      0x5,0x17,0x29,0x4D
   \              0x29 0x4D    
   \   00000018   0x4D 0x2F          DC8      0x4D,0x2F,0x4D,0x57
   \              0x4D 0x57    
   \   0000001C   0x4B 0x00          DC8      0x4B,0x0
     71              {
     72                  case kUSB_DeviceHidEventSendResponse:
     73                      /*!< Send data completed */
     74                      if ((hid_report_param->reportLength == 0xFFFFFFFF) || (hid_report_param->reportLength == 0x0))
   \                     ??usb_device_hid_generic_callback_2: (+1)
   \   0000001E   0x6870             LDR      R0,[R6, #+4]
   \   00000020   0xF110 0x0F01      CMN      R0,#+1
   \   00000024   0xBF18             IT       NE 
   \   00000026   0x2800             CMPNE    R0,#+0
   \   00000028   0xD011             BEQ.N    ??usb_device_hid_generic_callback_3
     75                      {
     76                          return kStatus_USB_Success;
     77                      }
     78                      if ((g_device_composite->hid_generic.hid_packet.sendSync > 0) &&
     79                          (g_device_composite->hid_generic.attach == 1))
   \   0000002A   0xF104 0x000C      ADD      R0,R4,#+12
   \   0000002E   0x68C0             LDR      R0,[R0, #+12]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xDB16             BLT.N    ??usb_device_hid_generic_callback_4
   \   00000034   0xF894 0x0046      LDRB     R0,[R4, #+70]
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD112             BNE.N    ??usb_device_hid_generic_callback_4
     80                      // Protect against extra complete due to data abort.
     81                      {
     82                          // Signal that write has completed.
     83                          sync_signal(&g_device_composite->hid_generic.hid_packet.sendSync);
   \   0000003C   0xF104 0x0018      ADD      R0,R4,#+24
   \   00000040   0xE00D             B.N      ??usb_device_hid_generic_callback_5
     84                      }
     85                      error = kStatus_USB_Success;
     86          
     87                      break;
     88                  case kUSB_DeviceHidEventRecvResponse:
     89                      /*!< Data received */
     90                      // Save the report size.
     91                      if ((hid_report_param->reportLength == 0xFFFFFFFF) || (hid_report_param->reportLength == 0x0))
   \                     ??usb_device_hid_generic_callback_6: (+1)
   \   00000042   0x6870             LDR      R0,[R6, #+4]
   \   00000044   0xF110 0x0F01      CMN      R0,#+1
   \   00000048   0xBF18             IT       NE 
   \   0000004A   0x2800             CMPNE    R0,#+0
   \   0000004C   0xD101             BNE.N    ??usb_device_hid_generic_callback_7
     92                      {
     93                          return kStatus_USB_Success;
   \                     ??usb_device_hid_generic_callback_3: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xBDF2             POP      {R1,R4-R7,PC}
     94                      }
     95                      g_device_composite->hid_generic.hid_packet.reportSize = hid_report_param->reportLength;
   \                     ??usb_device_hid_generic_callback_7: (+1)
   \   00000052   0xF104 0x010C      ADD      R1,R4,#+12
   \   00000056   0x6108             STR      R0,[R1, #+16]
     96          
     97                      g_device_composite->hid_generic.hid_packet.didReceiveFirstReport = true;
   \   00000058   0x700D             STRB     R5,[R1, #+0]
     98          
     99                      // Wake up the read packet handler.
    100                      sync_signal(&g_device_composite->hid_generic.hid_packet.receiveSync);
   \   0000005A   0xF104 0x0014      ADD      R0,R4,#+20
   \                     ??usb_device_hid_generic_callback_5: (+1)
   \   0000005E   0x.... 0x....      BL       sync_signal
    101                      error = kStatus_USB_Success;
   \                     ??usb_device_hid_generic_callback_4: (+1)
   \   00000062   0x2500             MOVS     R5,#+0
    102          
    103                      break;
   \   00000064   0xE02D             B.N      ??usb_device_hid_generic_callback_1
    104                  case kUSB_DeviceHidEventGetReport:
    105                      /*!< Get report request */
    106                      // Send an empty report. The host should only be reading reports via the interrupt pipe.
    107                      memset(&g_device_composite->hid_generic.hid_packet.report, 0,
    108                             sizeof(g_device_composite->hid_generic.hid_packet.report));
   \                     ??usb_device_hid_generic_callback_8: (+1)
   \   00000066   0x2124             MOVS     R1,#+36
   \   00000068   0xF104 0x0020      ADD      R0,R4,#+32
   \   0000006C   0x.... 0x....      BL       __aeabi_memclr4
    109                      param = (uint8_t *)&g_device_composite->hid_generic.hid_packet.report.header; // point to the report to send
    110                      // size is set to 0 above
    111                      break;
   \   00000070   0xE027             B.N      ??usb_device_hid_generic_callback_1
    112                  case kUSB_DeviceHidEventSetReport:
    113                      // Check for data phase abort packet.
    114                      header = (bl_hid_header_t *)param;
    115                      if ((header->packetLengthLsb == 0) && (header->packetLengthMsb == 0) &&
    116                          (header->reportID == kBootloaderReportID_CommandOut))
   \                     ??usb_device_hid_generic_callback_9: (+1)
   \   00000072   0x78B0             LDRB     R0,[R6, #+2]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xBF01             ITTTT    EQ 
   \   00000078   0x78F0             LDRBEQ   R0,[R6, #+3]
   \   0000007A   0x2800             CMPEQ    R0,#+0
   \   0000007C   0x7830             LDRBEQ   R0,[R6, #+0]
   \   0000007E   0x2801             CMPEQ    R0,#+1
   \   00000080   0xD103             BNE.N    ??usb_device_hid_generic_callback_10
    117                      {
    118                          g_device_composite->hid_generic.hid_packet.didReceiveDataPhaseAbort = true;
   \   00000082   0xF104 0x010C      ADD      R1,R4,#+12
   \   00000086   0x7048             STRB     R0,[R1, #+1]
    119                          break;
   \   00000088   0xE01B             B.N      ??usb_device_hid_generic_callback_1
    120                      }
    121          
    122                      // Copy the report data into our local buffer.
    123                      memcpy(&g_device_composite->hid_generic.hid_packet.report.header, param, hid_report_param->reportLength);
   \                     ??usb_device_hid_generic_callback_10: (+1)
   \   0000008A   0x6872             LDR      R2,[R6, #+4]
   \   0000008C   0x4631             MOV      R1,R6
   \   0000008E   0xF104 0x0020      ADD      R0,R4,#+32
   \   00000092   0x.... 0x....      BL       __aeabi_memcpy
    124          
    125                      // Save the report size.
    126                      g_device_composite->hid_generic.hid_packet.reportSize = hid_report_param->reportLength;
   \   00000096   0xF104 0x010C      ADD      R1,R4,#+12
   \   0000009A   0x6870             LDR      R0,[R6, #+4]
   \   0000009C   0x6108             STR      R0,[R1, #+16]
    127          
    128                      // Remember that we received a report.
    129                      g_device_composite->hid_generic.hid_packet.didReceiveFirstReport = true;
   \   0000009E   0x700D             STRB     R5,[R1, #+0]
    130          
    131                      // Wake up the read packet handler.
    132                      sync_signal(&g_device_composite->hid_generic.hid_packet.receiveSync);
   \   000000A0   0xF104 0x0014      ADD      R0,R4,#+20
   \   000000A4   0x.... 0x....      BL       sync_signal
    133                      break;
   \   000000A8   0xE00B             B.N      ??usb_device_hid_generic_callback_1
    134                  case kUSB_DeviceHidEventRequestReportBuffer:
    135                      error = kStatus_USB_InvalidRequest;
   \                     ??usb_device_hid_generic_callback_11: (+1)
   \   000000AA   0x2505             MOVS     R5,#+5
    136                      break;
   \   000000AC   0xE009             B.N      ??usb_device_hid_generic_callback_1
    137                  case kUSB_DeviceHidEventGetIdle:
    138                  case kUSB_DeviceHidEventGetProtocol:
    139                  case kUSB_DeviceHidEventSetIdle:
    140                      sync_init(&g_device_composite->hid_generic.hid_packet.receiveSync, false);
   \                     ??usb_device_hid_generic_callback_12: (+1)
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0xF104 0x0014      ADD      R0,R4,#+20
   \   000000B4   0x.... 0x....      BL       sync_init
    141                      sync_init(&g_device_composite->hid_generic.hid_packet.sendSync, false);
   \   000000B8   0x6838             LDR      R0,[R7, #+0]
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0x3018             ADDS     R0,R0,#+24
   \   000000BE   0x.... 0x....      BL       sync_init
    142                      break;
    143                  case kUSB_DeviceHidEventSetProtocol:
    144                      break;
    145              }
    146          
    147              return error;
   \                     ??usb_device_hid_generic_callback_1: (+1)
   \   000000C2   0x4628             MOV      R0,R5
   \   000000C4   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    148          }
    149          
    150          /*!
    151           * @brief HID device set configuration function.
    152           *
    153           * This function sets configuration for HID class.
    154           *
    155           * @param handle The HID class handle.
    156           * @param configure The HID class configure index.
    157           *
    158           * @return A USB error code or kStatus_USB_Success.
    159           */

   \                                 In section .text, align 2, keep-with-next
    160          usb_status_t usb_device_hid_generic_set_configure(class_handle_t handle, uint8_t configure)
    161          {
   \                     usb_device_hid_generic_set_configure: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
    162              usb_status_t error = kStatus_USB_Success;
   \   00000004   0x2000             MOVS     R0,#+0
    163              if (USB_COMPOSITE_CONFIGURE_INDEX == configure)
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD10D             BNE.N    ??usb_device_hid_generic_set_configure_0
    164              {
    165                  g_device_composite->hid_generic.attach = 1;
   \   0000000A   0x....             LDR.N    R5,??DataTable4
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
   \   0000000E   0xF880 0x1046      STRB     R1,[R0, #+70]
    166          
    167                  /* Set device configuration request */
    168                  error = USB_DeviceHidRecv(g_device_composite->hid_generic.hid_handle, USB_HID_GENERIC_ENDPOINT_OUT,
    169                                            (uint8_t *)&g_device_composite->hid_generic.hid_packet.report.header,
    170                                            sizeof(g_device_composite->hid_generic.hid_packet.report));
   \   00000012   0xF100 0x0220      ADD      R2,R0,#+32
   \   00000016   0x6880             LDR      R0,[R0, #+8]
   \   00000018   0x2324             MOVS     R3,#+36
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x.... 0x....      BL       USB_DeviceHidRecv
    171                  g_device_composite->hid_generic.current_configuration = configure;
   \   00000020   0x6829             LDR      R1,[R5, #+0]
   \   00000022   0xF881 0x4047      STRB     R4,[R1, #+71]
    172              }
    173              return error;
   \                     ??usb_device_hid_generic_set_configure_0: (+1)
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    174          }
    175          

   \                                 In section .text, align 2, keep-with-next
    176          usb_status_t usb_device_hid_generic_set_interface(class_handle_t handle, uint8_t interface, uint8_t alternate_setting)
    177          {
    178              usb_status_t error = kStatus_USB_Success;
   \                     usb_device_hid_generic_set_interface: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    179              if (interface < USB_HID_GENERIC_INTERFACE_COUNT)
   \   00000002   0xB951             CBNZ.N   R1,??usb_device_hid_generic_set_interface_0
    180              {
    181                  g_device_composite->hid_generic.current_interface_alternate_setting[interface] = alternate_setting;
   \   00000004   0x....             LDR.N    R0,??DataTable4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF880 0x2048      STRB     R2,[R0, #+72]
    182                  error = USB_DeviceHidRecv(g_device_composite->hid_generic.hid_handle, USB_HID_GENERIC_ENDPOINT_OUT,
    183                                            (uint8_t *)&g_device_composite->hid_generic.hid_packet.report.header,
    184                                            sizeof(g_device_composite->hid_generic.hid_packet.report));
   \   0000000C   0xF100 0x0220      ADD      R2,R0,#+32
   \   00000010   0x6880             LDR      R0,[R0, #+8]
   \   00000012   0x2324             MOVS     R3,#+36
   \   00000014   0x2102             MOVS     R1,#+2
   \   00000016   0x.... 0x....      B.W      USB_DeviceHidRecv
    185              }
    186              return error;
   \                     ??usb_device_hid_generic_set_interface_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
    187          }
    188          

   \                                 In section .text, align 2, keep-with-next
    189          usb_status_t usb_device_hid_generic_init(usb_device_composite_struct_t *device_composite)
    190          {
    191              g_device_composite = device_composite;
   \                     usb_device_hid_generic_init: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4
   \   00000002   0x6008             STR      R0,[R1, #+0]
    192              return kStatus_USB_Success;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x4770             BX       LR               ;; return
    193          }
    194          

   \                                 In section .text, align 2, keep-with-next
    195          usb_status_t usb_device_hid_generic_deinit(usb_device_composite_struct_t *device_composite)
    196          {
    197              g_device_composite = device_composite;
   \                     usb_device_hid_generic_deinit: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4
   \   00000002   0x6008             STR      R0,[R1, #+0]
    198              g_device_composite->hid_generic.hid_handle = (class_handle_t)NULL;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x6088             STR      R0,[R1, #+8]
    199              return kStatus_USB_Success;
   \   0000000A   0x4770             BX       LR               ;; return
    200          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     g_device_composite
    201          
    202          #endif //  BL_CONFIG_USB_HID

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   usb_device_hid_generic_callback
        24   -> __aeabi_memclr4
        24   -> __aeabi_memcpy
        24   -> sync_init
        24   -> sync_signal
       0   usb_device_hid_generic_deinit
       0   usb_device_hid_generic_init
      16   usb_device_hid_generic_set_configure
        16   -> USB_DeviceHidRecv
       0   usb_device_hid_generic_set_interface
         0   -> USB_DeviceHidRecv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  g_device_composite
     198  usb_device_hid_generic_callback
      12  usb_device_hid_generic_deinit
       8  usb_device_hid_generic_init
      40  usb_device_hid_generic_set_configure
      28  usb_device_hid_generic_set_interface

 
   4 bytes in section .bss
 290 bytes in section .text
 
 290 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
