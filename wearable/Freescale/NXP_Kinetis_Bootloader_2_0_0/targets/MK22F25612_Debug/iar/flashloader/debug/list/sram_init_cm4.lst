###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       16/Aug/2016  13:16:00
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\memory\src\sram_init_cm4.c
#    Command line =  
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\memory\src\sram_init_cm4.c"
#        -D DEBUG -D NDEBUG -D USB_STACK_BM -D CPU_MK22FN256VDC12 -D
#        CPU_IS_ARM_CORTEX_M4=1 -D IAR -D BL_TARGET_RAM -lC
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader\debug\list"
#        --diag_suppress Pa039,Pe068,Pe069,Pa082,Pe177,Pe186,Pe550,Pa050 -o
#        "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader\debug\obj"
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../src\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../src/startup\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/platform/devices/MK22F25612\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/autobaud\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/usb/include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/usb/osa\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/usb/device\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/usb/device/class\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/bm_usb\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/platform\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/platform/devices\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/platform/CMSIS/Include\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/drivers\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/startup\"
#        -I "C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader/../../../../src/drivers/common\"
#        -Ohz --use_c++_inline
#    Locale       =  C
#    List file    =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader\debug\list\sram_init_cm4.lst
#    Object file  =  
#        C:\Users\cwati\Documents\My
#        Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22F25612\iar\flashloader\debug\obj\sram_init_cm4.o
#
###############################################################################

C:\Users\cwati\Documents\My Work\Freescale\Bootloader\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\memory\src\sram_init_cm4.c
      1          /*
      2           * Copyright (c) 2014, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "bootloader_common.h"
     32          #include "bootloader/bl_context.h"
     33          #include "memory/memory.h"
     34          #if !defined(BOOTLOADER_HOST)
     35          #include "fsl_device_registers.h"
     36          #endif // BOOTLOADER_HOST
     37          #include "sram_init.h"
     38          #include "utilities/fsl_assert.h"
     39          
     40          ////////////////////////////////////////////////////////////////////////////////
     41          // Code
     42          ////////////////////////////////////////////////////////////////////////////////
     43          //! @brief Determine if a number is power of 2.
     44          static inline bool is_power_of_2(uint32_t number)
     45          {
     46              return !(number && (number & (number - 1)));
     47          }
     48          
     49          //! @brief Initialize address ranges of SRAM for chips belongs to cm4 family

   \                                 In section .text, align 4, keep-with-next
     50          status_t sram_init(void)
     51          {
     52          #if defined(__CORE_CM4_H_GENERIC)
     53          
     54              uint32_t ram_size = 0;
     55              uint32_t tmp;
     56          #if defined(FSL_FEATURE_SIM_OPT_HAS_RAMSIZE)
     57              tmp = (SIM->SOPT1 & SIM_SOPT1_RAMSIZE_MASK) >> SIM_SOPT1_RAMSIZE_SHIFT;
   \                     sram_init: (+1)
   \   00000000   0x481A             LDR.N    R0,??sram_init_1  ;; 0x40047000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
     58          #elif defined(FSL_FEATURE_SIM_SDID_HAS_SRAMSIZE)
     59              tmp = (SIM->SDID & SIM_SDID_RAMSIZE) >> SIM_SDID_RAMSIZE_SHIFT;
     60          #else
     61          #error "No valid RAMSIZE defined!"
     62          #endif
     63              switch (tmp)
   \   00000004   0x0B00             LSRS     R0,R0,#+12
   \   00000006   0xF000 0x000F      AND      R0,R0,#0xF
   \   0000000A   0x1EC0             SUBS     R0,R0,#+3
   \   0000000C   0x2808             CMP      R0,#+8
   \   0000000E   0xD82B             BHI.N    ??sram_init_2
   \   00000010   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??sram_init_0:
   \   00000014   0x05 0x08          DC8      0x5,0x8,0xB,0xE
   \              0x0B 0x0E    
   \   00000018   0x11 0x14          DC8      0x11,0x14,0x17,0x2A
   \              0x17 0x2A    
   \   0000001C   0x1A 0x00          DC8      0x1A,0x0
     64              {
     65                  case kRamSize16kIndex:
     66                      ram_size = 16 * 1024UL;
   \                     ??sram_init_3: (+1)
   \   0000001E   0xF44F 0x4080      MOV      R0,#+16384
     67                      break;
   \   00000022   0xE013             B.N      ??sram_init_4
     68                  case kRamSize24kIndex:
     69                      ram_size = 24 * 1024UL;
   \                     ??sram_init_5: (+1)
   \   00000024   0xF44F 0x40C0      MOV      R0,#+24576
     70                      break;
   \   00000028   0xE010             B.N      ??sram_init_4
     71                  case kRamSize32kIndex:
     72                      ram_size = 32 * 1024UL;
   \                     ??sram_init_6: (+1)
   \   0000002A   0xF44F 0x4000      MOV      R0,#+32768
     73                      break;
   \   0000002E   0xE00D             B.N      ??sram_init_4
     74                  case kRamSize48kIndex:
     75                      ram_size = 48 * 1024UL;
   \                     ??sram_init_7: (+1)
   \   00000030   0xF44F 0x4040      MOV      R0,#+49152
     76                      break;
   \   00000034   0xE00A             B.N      ??sram_init_4
     77                  case kRamSize64kIndex:
     78                      ram_size = 64 * 1024UL;
   \                     ??sram_init_8: (+1)
   \   00000036   0xF44F 0x3080      MOV      R0,#+65536
     79                      break;
   \   0000003A   0xE007             B.N      ??sram_init_4
     80                  case kRamSize96kIndex:
     81                      ram_size = 96 * 1024UL;
   \                     ??sram_init_9: (+1)
   \   0000003C   0xF44F 0x30C0      MOV      R0,#+98304
     82                      break;
   \   00000040   0xE004             B.N      ??sram_init_4
     83                  case kRamSize128kIndex:
     84                      ram_size = 128 * 1024UL;
   \                     ??sram_init_10: (+1)
   \   00000042   0xF44F 0x3000      MOV      R0,#+131072
     85                      break;
   \   00000046   0xE001             B.N      ??sram_init_4
     86                  case kRamSize256kIndex:
     87                      ram_size = 256 * 1024UL;
   \                     ??sram_init_11: (+1)
   \   00000048   0xF44F 0x2080      MOV      R0,#+262144
     88                      break;
     89                  default:
     90                      ram_size = 0;
     91                      break;
     92              }
     93          
     94              assert(ram_size > 0);
     95          
     96              uint32_t sram_lower_part = kSram_LowerPart;
     97              uint32_t sram_upper_part = kSram_UpperPart;
     98          
     99              if (ram_size)
    100              {
    101                  // For target in which RAM size is not power of 2, for example, 24KB, 48KB, 96KB, 192KB, etc
    102                  // SRAM_LOWER is 1 / 3 of Total SRAM.
    103                  if (!is_power_of_2(ram_size))
    104                  {
    105                      sram_lower_part = 1;
    106                      sram_upper_part = 2;
    107                  }
    108          
    109                  // Update  address range of SRAM
    110                  memory_map_entry_t *map = (memory_map_entry_t *)&g_bootloaderContext.memoryMap[kIndexSRAM];
   \                     ??sram_init_4: (+1)
   \   0000004C   0x4908             LDR.N    R1,??sram_init_1+0x4
   \   0000004E   0x6849             LDR      R1,[R1, #+4]
    111          
    112                  uint32_t tmp = ram_size / (sram_lower_part + sram_upper_part);
   \   00000050   0x2203             MOVS     R2,#+3
   \   00000052   0xFBB0 0xF0F2      UDIV     R0,R0,R2
    113          
    114                  map->startAddress = kSRAMSeparatrix - tmp * sram_lower_part;   // start of SRAM
   \   00000056   0xF1C0 0x5200      RSB      R2,R0,#+536870912
   \   0000005A   0xF841 0x2F10      STR      R2,[R1, #+16]!
    115                  map->endAddress = kSRAMSeparatrix + tmp * sram_upper_part - 1; // end of SRAM
   \   0000005E   0xF06F 0x4260      MVN      R2,#-536870912
   \   00000062   0xEB02 0x0040      ADD      R0,R2,R0, LSL #+1
   \   00000066   0x6048             STR      R0,[R1, #+4]
    116              }
    117          
    118          #else
    119          #error "This function only applies to cm4 family"
    120          #endif // __CORE_CM4_H_GENERIC
    121          
    122              return kStatus_Success;
   \                     ??sram_init_2: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x4770             BX       LR               ;; return
   \                     ??sram_init_1:
   \   0000006C   0x40047000         DC32     0x40047000
   \   00000070   0x........         DC32     g_bootloaderContext
    123          }
    124          
    125          ////////////////////////////////////////////////////////////////////////////////
    126          // EOF
    127          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   sram_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     116  sram_init

 
 116 bytes in section .text
 
 116 bytes of CODE memory

Errors: none
Warnings: none
