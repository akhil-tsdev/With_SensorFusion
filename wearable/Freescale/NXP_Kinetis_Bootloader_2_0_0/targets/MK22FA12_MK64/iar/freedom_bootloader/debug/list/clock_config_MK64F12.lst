###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       02/Sep/2016  11:55:07
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\src\clock_config_MK64F12.c
#    Command line =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\src\clock_config_MK64F12.c
#        -D DEBUG -D NDEBUG -D USB_STACK_BM -D CPU_MK64FN1M0VMD12 -D
#        CPU_IS_ARM_CORTEX_M4=1 -D IAR -D FREEDOM -D BL_TARGET_FLASH -lC
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa039,Pe068,Pe069,Pa082,Pe177,Pe186,Pe550,Pa050 -o
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader\debug\obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../src\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../src/startup\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/platform/devices/MK64F12\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/usb/include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/usb/osa\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/usb/device\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/usb/device/class\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/bm_usb\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/platform\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/platform/devices\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/platform/CMSIS/Include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader/../../../../src/drivers/common\
#        -Ohz --use_c++_inline
#    Locale       =  C
#    List file    =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader\debug\list\clock_config_MK64F12.lst
#    Object file  =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\iar\freedom_bootloader\debug\obj\clock_config_MK64F12.o
#
###############################################################################

C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK64F12\src\clock_config_MK64F12.c
      1          /*
      2           * Copyright (c) 2013-2015, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "bootloader_common.h"
     32          #include "bootloader/bl_context.h"
     33          #include "property/property.h"
     34          #include "fsl_device_registers.h"
     35          #include "utilities/fsl_assert.h"
     36          
     37          ////////////////////////////////////////////////////////////////////////////////
     38          // Definitions
     39          ////////////////////////////////////////////////////////////////////////////////
     40          
     41          // Clock mode types
     42          typedef enum _target_clock_mode
     43          {
     44              kClockMode_FEI_48MHz = 0,
     45              kClockMode_FEI_21MHz = 1,
     46              kClockMode_Default = kClockMode_FEI_21MHz,
     47          } target_clock_mode_t;
     48          
     49          ////////////////////////////////////////////////////////////////////////////////
     50          // Prototypes
     51          ////////////////////////////////////////////////////////////////////////////////
     52          
     53          // This function implements clock mode switch between FEI and PEE mode used in this bootloader
     54          void clock_mode_switch(const target_clock_mode_t currentMode, const target_clock_mode_t expectedMode);
     55          
     56          ////////////////////////////////////////////////////////////////////////////////
     57          // Code
     58          ////////////////////////////////////////////////////////////////////////////////
     59          
     60          // See bootloader_common for documentation on this function.

   \                                 In section .text, align 2, keep-with-next
     61          void configure_clocks(bootloader_clock_option_t option)
     62          {
   \                     configure_clocks: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
     63              static target_clock_mode_t s_currentClockMode = kClockMode_FEI_21MHz;
     64              static uint32_t s_defaultClockDivider;
     65          
     66              if (option == kClockOption_EnterBootloader)
   \   00000004   0x....             LDR.N    R4,??DataTable1
   \   00000006   0x....             LDR.N    R5,??DataTable1_1  ;; 0x40048044
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x000A             MOVS     R2,R1
   \   0000000E   0xD16F             BNE.N    ??configure_clocks_0
     67              {
     68                  s_defaultClockDivider = SIM->CLKDIV1;
   \   00000010   0x6829             LDR      R1,[R5, #+0]
   \   00000012   0x6061             STR      R1,[R4, #+4]
     69          
     70                  // General procedure to be implemented:
     71                  // 1. Read clock flags and divider from bootloader config in property store
     72                  bootloader_configuration_data_t *config = &g_bootloaderContext.propertyInterface->store->configurationData;
   \   00000014   0x....             LDR.N    R1,??DataTable1_2
   \   00000016   0x6889             LDR      R1,[R1, #+8]
   \   00000018   0x6909             LDR      R1,[R1, #+16]
   \   0000001A   0xF101 0x0268      ADD      R2,R1,#+104
     73                  uint8_t options = config->clockFlags;
     74          
     75                  // Check if the USB HID peripheral is enabled. If it is enabled, we always
     76                  // configure the MCGOUT to 48MHz.
     77                  bool isUsbEnabled = config->enabledPeripherals & kPeripheralType_USB_HID;
   \   0000001E   0x7C11             LDRB     R1,[R2, #+16]
     78          
     79                  // 2. If NOT High Speed and USB isn't enabled, do nothing (use reset clock config)
     80                  if ((options & kClockFlag_HighSpeed) && (!isUsbEnabled))
   \   00000020   0x7F16             LDRB     R6,[R2, #+28]
   \   00000022   0x0909             LSRS     R1,R1,#+4
   \   00000024   0xF006 0x0601      AND      R6,R6,#0x1
   \   00000028   0xF001 0x0301      AND      R3,R1,#0x1
   \   0000002C   0xF083 0x0701      EOR      R7,R3,#0x1
   \   00000030   0x423E             TST      R6,R7
   \   00000032   0x....             LDR.N    R1,??DataTable1_3
   \   00000034   0xD008             BEQ.N    ??configure_clocks_1
     81                  {
     82                      // Get actual Core clock.
     83                      SystemCoreClock =
     84                          kDefaultClock / (((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT) + 1);
   \   00000036   0x682A             LDR      R2,[R5, #+0]
   \   00000038   0x0F12             LSRS     R2,R2,#+28
   \   0000003A   0xF04F 0x70A0      MOV      R0,#+20971520
   \   0000003E   0x1C52             ADDS     R2,R2,#+1
   \   00000040   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \   00000044   0x6008             STR      R0,[R1, #+0]
     85          
     86                      // High speed flag is set (meaning disabled), so just use default clocks.
     87                      return;
   \   00000046   0xE059             B.N      ??configure_clocks_2
     88                  }
     89          
     90                  // 3. Set OUTDIV1 based on divider in config. OUTDIV4 starts out at /1.
     91                  // The divider values are masked by the maximum bits per divider.
     92                  uint32_t div1 = ((~config->clockDivider) & (SIM_CLKDIV1_OUTDIV1_MASK >> SIM_CLKDIV1_OUTDIV1_SHIFT)) + 1;
   \                     ??configure_clocks_1: (+1)
   \   00000048   0x7F52             LDRB     R2,[R2, #+29]
   \   0000004A   0x43D2             MVNS     R2,R2
   \   0000004C   0xF002 0x020F      AND      R2,R2,#0xF
   \   00000050   0x1C52             ADDS     R2,R2,#+1
     93          
     94                  // 4. Get MCGOUTCLK
     95                  uint32_t McgOutClk = kHIRC;
     96          
     97                  // 5. Keep core clock up kMinCoreClockWithUsbSupport if usb is supported.
     98                  uint32_t freq = McgOutClk;
     99                  // If USB is enabled, the CPU clock must not be allowed to go below 20 MHz
    100                  if (isUsbEnabled)
   \   00000052   0xB90B             CBNZ.N   R3,??configure_clocks_3
   \   00000054   0xE006             B.N      ??configure_clocks_4
    101                  {
    102                      while ((freq / div1) < kMinCoreClockWithUsbSupport)
    103                      {
    104                          --div1;
   \                     ??configure_clocks_5: (+1)
   \   00000056   0x1E52             SUBS     R2,R2,#+1
    105                      }
   \                     ??configure_clocks_3: (+1)
   \   00000058   0x....             LDR.N    R3,??DataTable1_4  ;; 0x2dc6c00
   \   0000005A   0x....             LDR.N    R6,??DataTable1_5  ;; 0x1312d00
   \   0000005C   0xFBB3 0xF3F2      UDIV     R3,R3,R2
   \   00000060   0x42B3             CMP      R3,R6
   \   00000062   0xD3F8             BCC.N    ??configure_clocks_5
    106                  }
    107          
    108                  // 6. Keep core clock below kMaxCoreClock
    109                  while ((freq / div1) > kMaxCoreClock)
   \                     ??configure_clocks_4: (+1)
   \   00000064   0x....             LDR.N    R3,??DataTable1_4  ;; 0x2dc6c00
   \   00000066   0x....             LDR.N    R6,??DataTable1_6  ;; 0x7270e01
   \   00000068   0xFBB3 0xF3F2      UDIV     R3,R3,R2
   \   0000006C   0x42B3             CMP      R3,R6
   \   0000006E   0xBF28             IT       CS 
   \   00000070   0x1C52             ADDCS    R2,R2,#+1
    110                  {
    111                      ++div1;
   \   00000072   0xD2F7             BCS.N    ??configure_clocks_4
    112                  }
    113          
    114                  assert((div1 >= kDivider_Min) && (div1 <= kDivider_Max));
    115          
    116                  uint32_t div2 = div1;
   \   00000074   0x4694             MOV      R12,R2
    117                  uint32_t div3 = div1;
   \   00000076   0x4616             MOV      R6,R2
    118                  uint32_t div4 = div1;
   \   00000078   0x4617             MOV      R7,R2
    119          
    120                  // 7. Keep bus freq below max.
    121                  //
    122                  // The bus clock is divided by OUTDIV2:
    123                  //      MCGOUTCLK -> OUTDIV2 -> bus_clk
    124                  freq = McgOutClk;
   \   0000007A   0x.... 0x....      LDR.W    R8,??DataTable1_7  ;; 0x3938701
   \   0000007E   0xE001             B.N      ??configure_clocks_6
    125                  while ((freq / div2) > kMaxBusClock)
    126                  {
    127                      // Increase bus clock divider.
    128                      ++div2;
   \                     ??configure_clocks_7: (+1)
   \   00000080   0xF10C 0x0C01      ADD      R12,R12,#+1
    129                  }
   \                     ??configure_clocks_6: (+1)
   \   00000084   0x.... 0x....      LDR.W    LR,??DataTable1_4  ;; 0x2dc6c00
   \   00000088   0xFBBE 0xFEFC      UDIV     LR,LR,R12
   \   0000008C   0x45C6             CMP      LR,R8
   \   0000008E   0xD2F7             BCS.N    ??configure_clocks_7
    130                  assert((div2 >= kDivider_Min) && (div2 <= kDivider_Max));
    131          
    132                  // 8. Keep FlexBus freq below max.
    133                  //
    134                  // The FlexBus clock is divided by OUTDIV3:
    135                  // MCGOUTCLK -> OUTDIV3 -> flexbus_clk
    136                  freq = McgOutClk;
    137                  while ((freq / div3) > kMaxFlexBusClock)
   \                     ??configure_clocks_8: (+1)
   \   00000090   0x.... 0x....      LDR.W    LR,??DataTable1_4  ;; 0x2dc6c00
   \   00000094   0x.... 0x....      LDR.W    R8,??DataTable1_8  ;; 0x2faf081
   \   00000098   0xFBBE 0xFEF6      UDIV     LR,LR,R6
   \   0000009C   0x45C6             CMP      LR,R8
   \   0000009E   0xBF28             IT       CS 
   \   000000A0   0x1C76             ADDCS    R6,R6,#+1
    138                  {
    139                      // Increase flexbus clock divider.
    140                      ++div3;
   \   000000A2   0xD2F5             BCS.N    ??configure_clocks_8
   \   000000A4   0xE000             B.N      ??configure_clocks_9
    141                  }
    142                  assert((div3 >= kDivider_Min) && (div3 <= kDivider_Max));
    143          
    144                  // 9. Keep flash freq below max.
    145                  //
    146                  // The flash clock is diveded by OUTDIV4:
    147                  //      MCGOUTCLK -> OUTDIV4 ->flash_clk
    148                  freq = McgOutClk;
    149                  while ((freq / div4) > kMaxFlashClock)
    150                  {
    151                      // Increase bus/flash clock divider.
    152                      ++div4;
   \                     ??configure_clocks_10: (+1)
   \   000000A6   0x1C7F             ADDS     R7,R7,#+1
    153                  }
   \                     ??configure_clocks_9: (+1)
   \   000000A8   0x.... 0x....      LDR.W    LR,??DataTable1_4  ;; 0x2dc6c00
   \   000000AC   0x.... 0x....      LDR.W    R8,??DataTable1_9  ;; 0x16e3601
   \   000000B0   0xFBBE 0xFEF7      UDIV     LR,LR,R7
   \   000000B4   0x45C6             CMP      LR,R8
   \   000000B6   0xD2F6             BCS.N    ??configure_clocks_10
    154                  assert((div4 >= kDivider_Min) && (div4 <= kDivider_Max));
    155          
    156                  if ((div1 == 1) && ((div2 > 8) || (div3 > 8) || (div4 > 8)))
   \   000000B8   0x2A01             CMP      R2,#+1
   \   000000BA   0xD105             BNE.N    ??configure_clocks_11
   \   000000BC   0xF1BC 0x0F09      CMP      R12,#+9
   \   000000C0   0xBF3C             ITT      CC 
   \   000000C2   0x2E09             CMPCC    R6,#+9
   \   000000C4   0x2F09             CMPCC    R7,#+9
   \   000000C6   0xD219             BCS.N    ??configure_clocks_2
    157                  {
    158                      return;
    159                  }
    160          
    161                  // 9. Now set the dividers
    162                  SIM->CLKDIV1 = SIM_CLKDIV1_OUTDIV1(div1 - 1) | SIM_CLKDIV1_OUTDIV1(div1 - 1) | SIM_CLKDIV1_OUTDIV2(div3 - 1) |
    163                                 SIM_CLKDIV1_OUTDIV4(div4 - 1); /* Update system prescalers */
   \                     ??configure_clocks_11: (+1)
   \   000000C8   0x1E76             SUBS     R6,R6,#+1
   \   000000CA   0x0636             LSLS     R6,R6,#+24
   \   000000CC   0x1E52             SUBS     R2,R2,#+1
   \   000000CE   0xF006 0x6670      AND      R6,R6,#0xF000000
   \   000000D2   0xEA46 0x7202      ORR      R2,R6,R2, LSL #+28
   \   000000D6   0x1E7E             SUBS     R6,R7,#+1
   \   000000D8   0x0436             LSLS     R6,R6,#+16
   \   000000DA   0xF406 0x2670      AND      R6,R6,#0xF0000
   \   000000DE   0x4332             ORRS     R2,R6,R2
   \   000000E0   0x602A             STR      R2,[R5, #+0]
    164          
    165                  // 10. Update SystemCoreClock global.
    166                  SystemCoreClock = McgOutClk / div1;
   \   000000E2   0x600B             STR      R3,[R1, #+0]
    167          
    168                  clock_mode_switch(s_currentClockMode, kClockMode_FEI_48MHz);
   \   000000E4   0x2100             MOVS     R1,#+0
   \   000000E6   0x.... 0x....      BL       clock_mode_switch
    169          
    170                  s_currentClockMode = kClockMode_FEI_48MHz;
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x7020             STRB     R0,[R4, #+0]
   \   000000EE   0xE005             B.N      ??configure_clocks_2
    171              }
    172              else if (option == kClockOption_ExitBootloader)
   \                     ??configure_clocks_0: (+1)
   \   000000F0   0x2901             CMP      R1,#+1
   \   000000F2   0xD103             BNE.N    ??configure_clocks_2
    173              {
    174                  // Restore from FEE mode to FEI mode
    175                  clock_mode_switch(s_currentClockMode, kClockMode_FEI_21MHz);
   \   000000F4   0x.... 0x....      BL       clock_mode_switch
    176          
    177                  // Restore clock divider
    178                  SIM->CLKDIV1 = s_defaultClockDivider;
   \   000000F8   0x6860             LDR      R0,[R4, #+4]
   \   000000FA   0x6028             STR      R0,[R5, #+0]
    179              }
    180          }
   \                     ??configure_clocks_2: (+1)
   \   000000FC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .data, align 4
   \                     `configure_clocks::s_currentClockMode`:
   \   00000000   0x01               DC8 1
   \   00000001   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    181          

   \                                 In section .text, align 2, keep-with-next
    182          void clock_mode_switch(const target_clock_mode_t currentMode, const target_clock_mode_t expectedMode)
    183          {
    184              // Note: here only implements clock switch between FEI and FEE,
    185              // The other modes are not supported.
    186              assert(currentMode == kClockMode_FEE || currentMode == kClockMode_FEI);
    187              assert(expectedMode == kClockMode_FEE || expectedMode == kClockMode_FEI);
    188          
    189              if (currentMode == expectedMode)
   \                     clock_mode_switch: (+1)
   \   00000000   0x4288             CMP      R0,R1
   \   00000002   0xD012             BEQ.N    ??clock_mode_switch_0
    190              {
    191                  return;
    192              }
    193          
    194              if (expectedMode == kClockMode_FEI_48MHz)
   \   00000004   0x000A             MOVS     R2,R1
   \   00000006   0x....             LDR.N    R0,??DataTable1_10  ;; 0x40064003
   \   00000008   0xD109             BNE.N    ??clock_mode_switch_1
    195              {
    196                  /* Switch to FEI mode */
    197                  uint8_t tmp = MCG->C4;
   \   0000000A   0x7801             LDRB     R1,[R0, #+0]
    198                  tmp &= (uint8_t) ~(MCG_C4_DRST_DRS_MASK);
    199                  tmp |= MCG_C4_DMX32_MASK;  // Multiply with 1464, MCGOUTCLK is 48Mhz
    200                  tmp |= MCG_C4_DRST_DRS(1); // Reference range:32.768kHZ
    201                  MCG->C4 = tmp;
   \   0000000C   0xF001 0x019F      AND      R1,R1,#0x9F
   \   00000010   0xF041 0x01A0      ORR      R1,R1,#0xA0
   \   00000014   0x7001             STRB     R1,[R0, #+0]
    202          
    203                  while (!(MCG->S & MCG_S_IREFST_MASK))
   \                     ??clock_mode_switch_2: (+1)
   \   00000016   0x78C1             LDRB     R1,[R0, #+3]
   \   00000018   0x06C9             LSLS     R1,R1,#+27
   \   0000001A   0xD5FC             BPL.N    ??clock_mode_switch_2
   \   0000001C   0x4770             BX       LR
    204                      ; // Wait until internal reference clock is ready.
    205              }
    206              else if (expectedMode == kClockMode_FEI_21MHz)
   \                     ??clock_mode_switch_1: (+1)
   \   0000001E   0x2901             CMP      R1,#+1
   \   00000020   0xD103             BNE.N    ??clock_mode_switch_0
    207              {
    208                  // Restore registers to default value out of reset.
    209                  MCG->C4 &= (uint8_t) ~(MCG_C4_DRST_DRS_MASK | MCG_C4_DMX32_MASK);
   \   00000022   0x7801             LDRB     R1,[R0, #+0]
   \   00000024   0xF001 0x011F      AND      R1,R1,#0x1F
   \   00000028   0x7001             STRB     R1,[R0, #+0]
    210              }
    211          }
   \                     ??clock_mode_switch_0: (+1)
   \   0000002A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     `configure_clocks::s_currentClockMode`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     g_bootloaderContext

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x02DC6C00         DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x01312D00         DC32     0x1312d00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x07270E01         DC32     0x7270e01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x03938701         DC32     0x3938701

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x02FAF081         DC32     0x2faf081

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x016E3601         DC32     0x16e3601

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x40064003         DC32     0x40064003
    212          
    213          ////////////////////////////////////////////////////////////////////////////////
    214          // EOF
    215          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   clock_mode_switch
      24   configure_clocks
        24   -> clock_mode_switch


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      44  clock_mode_switch
     256  configure_clocks
       8  s_currentClockMode
          s_defaultClockDivider

 
   8 bytes in section .data
 344 bytes in section .text
 
 344 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
