###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       16/Sep/2016  13:24:11
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\startup\startup.c
#    Command line =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\startup\startup.c
#        -D NDEBUG -D USB_STACK_BM -D CPU_MK22FN1M0AVMC12 -D
#        CPU_IS_ARM_CORTEX_M4=1 -D IAR -D FREEDOM -D BL_TARGET_FLASH -D
#        TURINGSENSE=1 -lC
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa039,Pe068,Pe069,Pa082,Pe177,Pe186,Pe550,Pa050 -o
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../src\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../src/startup\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\..\..\..\..\src\platform\devices\MK22FA12_MK64\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/usb/include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/usb/osa\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/usb/device\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/usb/device/class\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/bm_usb\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/platform\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/platform/devices\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/platform/CMSIS/Include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/drivers/common\
#        -On --use_c++_inline
#    Locale       =  C
#    List file    =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\debug\list\startup.lst
#    Object file  =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\debug\obj\startup.o
#
###############################################################################

C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\startup\startup.c
      1          /*
      2           * Copyright (c) 2013, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include <stdint.h>
     32          #include "fsl_device_registers.h"
     33          #include "bootloader_core.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_ClearEnabledIRQs(void)
   \                     NVIC_ClearEnabledIRQs: (+1)
   \   00000000   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000004   0x....             LDR.N    R1,??DataTable2  ;; 0xe000e180
   \   00000006   0x6008             STR      R0,[R1, #+0]
   \   00000008   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000C   0x....             LDR.N    R1,??DataTable2_1  ;; 0xe000e184
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000014   0x....             LDR.N    R1,??DataTable2_2  ;; 0xe000e188
   \   00000016   0x6008             STR      R0,[R1, #+0]
   \   00000018   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001C   0x....             LDR.N    R1,??DataTable2_3  ;; 0xe000e18c
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000024   0x....             LDR.N    R1,??DataTable2_4  ;; 0xe000e190
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002C   0x....             LDR.N    R1,??DataTable2_5  ;; 0xe000e194
   \   0000002E   0x6008             STR      R0,[R1, #+0]
   \   00000030   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000034   0x....             LDR.N    R1,??DataTable2_6  ;; 0xe000e198
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000003C   0x....             LDR.N    R1,??DataTable2_7  ;; 0xe000e19c
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_ClearAllPendingIRQs(void)
   \                     NVIC_ClearAllPendingIRQs: (+1)
   \   00000000   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000004   0x....             LDR.N    R1,??DataTable2_8  ;; 0xe000e280
   \   00000006   0x6008             STR      R0,[R1, #+0]
   \   00000008   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000C   0x....             LDR.N    R1,??DataTable2_9  ;; 0xe000e284
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000014   0x....             LDR.N    R1,??DataTable2_10  ;; 0xe000e288
   \   00000016   0x6008             STR      R0,[R1, #+0]
   \   00000018   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001C   0x....             LDR.N    R1,??DataTable2_11  ;; 0xe000e28c
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000024   0x....             LDR.N    R1,??DataTable2_12  ;; 0xe000e290
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002C   0x....             LDR.N    R1,??DataTable2_13  ;; 0xe000e294
   \   0000002E   0x6008             STR      R0,[R1, #+0]
   \   00000030   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000034   0x....             LDR.N    R1,??DataTable2_14  ;; 0xe000e298
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000003C   0x....             LDR.N    R1,??DataTable2_15  ;; 0xe000e29c
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0x4770             BX       LR               ;; return
     34          
     35          #if (defined(__ICCARM__))
     36          #pragma section = ".intvec"
     37          #pragma section = ".data"
     38          #pragma section = ".data_init"
     39          #pragma section = ".bss"
     40          #pragma section = "CodeRelocate"
     41          #pragma section = "CodeRelocateRam"
     42          #pragma section = "USBGlobal"
     43          #endif
     44          
     45          ////////////////////////////////////////////////////////////////////////////////
     46          // Code
     47          ////////////////////////////////////////////////////////////////////////////////
     48          
     49          /*FUNCTION**********************************************************************
     50           *
     51           * Function Name : init_data_bss
     52           * Description   : Make necessary initializations for RAM.
     53           * - Copy initialized data from ROM to RAM.
     54           * - Clear the zero-initialized data section.
     55           * - Copy the vector table from ROM to RAM. This could be an option.
     56           *
     57           * Tool Chians:
     58           *   __GNUC__   : GCC
     59           *   __CC_ARM   : KEIL
     60           *   __ICCARM__ : IAR
     61           *
     62           *END**************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     63          void init_data_bss(void)
     64          {
   \                     init_data_bss: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
     65          /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */
     66          #if defined(__CC_ARM)
     67              extern uint32_t Image$$VECTOR_ROM$$Base[];
     68              extern uint32_t Image$$VECTOR_RAM$$Base[];
     69              extern uint32_t Image$$RW_m_data$$Base[];
     70          
     71          #define __VECTOR_TABLE Image$$VECTOR_ROM$$Base
     72          #define __VECTOR_RAM Image$$VECTOR_RAM$$Base
     73          #define __RAM_VECTOR_TABLE_SIZE (((uint32_t)Image$$RW_m_data$$Base - (uint32_t)Image$$VECTOR_RAM$$Base))
     74          #elif defined(__ICCARM__)
     75              extern uint32_t __RAM_VECTOR_TABLE_SIZE[];
     76              extern uint32_t __VECTOR_TABLE[];
     77              extern uint32_t __VECTOR_RAM[];
     78          #elif defined(__GNUC__)
     79              extern uint32_t __VECTOR_TABLE[];
     80          #endif
     81          
     82          #if (defined(__ICCARM__))
     83              SCB->VTOR = (uint32_t)__section_begin(".intvec");
   \   00000004   0x....             LDR.N    R0,??DataTable2_16
   \   00000006   0x....             LDR.N    R1,??DataTable2_17  ;; 0xe000ed08
   \   00000008   0x6008             STR      R0,[R1, #+0]
     84          #else
     85              SCB->VTOR = (uint32_t)__VECTOR_TABLE;
     86          #endif
     87          
     88          #if !defined(__CC_ARM)
     89          
     90              /* Declare pointers for various data sections. These pointers
     91               * are initialized using values pulled in from the linker file */
     92              uint8_t *data_ram, *data_rom, *data_rom_end;
     93              uint8_t *bss_start, *bss_end;
     94              uint32_t n;
     95          
     96          // Get the addresses for the .data section (initialized data section)
     97          #if defined(__GNUC__)
     98              extern uint32_t __DATA_ROM[];
     99              extern uint32_t __DATA_RAM[];
    100              extern char __DATA_END[];
    101              data_ram = (uint8_t *)__DATA_RAM;
    102              data_rom = (uint8_t *)__DATA_ROM;
    103              data_rom_end = (uint8_t *)__DATA_END; // This is actually a RAM address in CodeWarrior
    104              n = data_rom_end - data_rom;
    105          #elif(defined(__ICCARM__))
    106              data_ram = __section_begin(".data");
   \   0000000A   0x....             LDR.N    R6,??DataTable2_18
   \   0000000C   0x0030             MOVS     R0,R6
    107              data_rom = __section_begin(".data_init");
   \   0000000E   0x....             LDR.N    R6,??DataTable2_19
   \   00000010   0x0031             MOVS     R1,R6
    108              data_rom_end = __section_end(".data_init");
   \   00000012   0x....             LDR.N    R6,??DataTable2_20
   \   00000014   0x0032             MOVS     R2,R6
    109              n = data_rom_end - data_rom;
   \   00000016   0x1A56             SUBS     R6,R2,R1
   \   00000018   0x0035             MOVS     R5,R6
    110          #endif
    111          
    112              if (data_ram != data_rom)
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD007             BEQ.N    ??init_data_bss_0
    113              {
    114                  // Copy initialized data from ROM to RAM
    115                  while (n)
   \                     ??init_data_bss_1: (+1)
   \   0000001E   0x2D00             CMP      R5,#+0
   \   00000020   0xD005             BEQ.N    ??init_data_bss_0
    116                  {
    117                      *data_ram++ = *data_rom++;
   \   00000022   0x780E             LDRB     R6,[R1, #+0]
   \   00000024   0x7006             STRB     R6,[R0, #+0]
   \   00000026   0x1C49             ADDS     R1,R1,#+1
   \   00000028   0x1C40             ADDS     R0,R0,#+1
    118                      n--;
   \   0000002A   0x1E6D             SUBS     R5,R5,#+1
   \   0000002C   0xE7F7             B.N      ??init_data_bss_1
    119                  }
    120              }
    121          
    122          // Get the addresses for the .bss section (zero-initialized data)
    123          #if defined(__GNUC__)
    124              extern char __START_BSS[];
    125              extern char __END_BSS[];
    126              bss_start = (uint8_t *)__START_BSS;
    127              bss_end = (uint8_t *)__END_BSS;
    128          #elif(defined(__ICCARM__))
    129              bss_start = __section_begin(".bss");
   \                     ??init_data_bss_0: (+1)
   \   0000002E   0x....             LDR.N    R6,??DataTable2_21
   \   00000030   0x0033             MOVS     R3,R6
    130              bss_end = __section_end(".bss");
   \   00000032   0x....             LDR.N    R6,??DataTable2_22
   \   00000034   0x0034             MOVS     R4,R6
    131          #endif
    132          
    133              // Clear the zero-initialized data section
    134              n = bss_end - bss_start;
   \   00000036   0x1AE6             SUBS     R6,R4,R3
   \   00000038   0x0035             MOVS     R5,R6
    135              while (n)
   \                     ??init_data_bss_2: (+1)
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD004             BEQ.N    ??init_data_bss_3
    136              {
    137                  *bss_start++ = 0;
   \   0000003E   0x2600             MOVS     R6,#+0
   \   00000040   0x701E             STRB     R6,[R3, #+0]
   \   00000042   0x1C5B             ADDS     R3,R3,#+1
    138                  n--;
   \   00000044   0x1E6D             SUBS     R5,R5,#+1
   \   00000046   0xE7F8             B.N      ??init_data_bss_2
    139              }
    140          
    141          #if defined(USB_STACK_BM)
    142          // Get the addresses for the USBGlobal section (zero-initialized data)
    143          #if (defined(__ICCARM__))
    144              uint8_t *usbGlobal_start = __section_begin("USBGlobal");
   \                     ??init_data_bss_3: (+1)
   \   00000048   0x....             LDR.N    R7,??DataTable2_23
    145              uint8_t *usbGlobal_end = __section_end("USBGlobal");
   \   0000004A   0x....             LDR.N    R6,??DataTable2_24
    146          #elif(defined(__GNUC__))
    147              extern uint8_t __START_USBGLOBAL[];
    148              extern uint8_t __END_USBGLOBAL[];
    149              uint8_t *usbGlobal_start = (uint8_t *)__START_USBGLOBAL;
    150              uint8_t *usbGlobal_end = (uint8_t *)__END_USBGLOBAL;
    151          #endif
    152          
    153              // Clear the zero-initialized data section
    154              n = usbGlobal_end - usbGlobal_start;
   \   0000004C   0xEBB6 0x0C07      SUBS     R12,R6,R7
   \   00000050   0x4665             MOV      R5,R12
    155              while (n)
   \                     ??init_data_bss_4: (+1)
   \   00000052   0x2D00             CMP      R5,#+0
   \   00000054   0xD006             BEQ.N    ??init_data_bss_5
    156              {
    157                  *usbGlobal_start++ = 0;
   \   00000056   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000005A   0xF887 0xC000      STRB     R12,[R7, #+0]
   \   0000005E   0x1C7F             ADDS     R7,R7,#+1
    158                  n--;
   \   00000060   0x1E6D             SUBS     R5,R5,#+1
   \   00000062   0xE7F6             B.N      ??init_data_bss_4
    159              }
    160          #endif // #if defined(USB_STACK_BM)
    161          
    162          /* Get addresses for any code sections that need to be copied from ROM to RAM.
    163           * The IAR tools have a predefined keyword that can be used to mark individual
    164           * functions for execution from RAM. Add "__ramfunc" before the return type in
    165           * the function prototype for any routines you need to execute from RAM instead
    166           * of ROM. ex: __ramfunc void foo(void);
    167           */
    168          #if (defined(__ICCARM__))
    169              uint8_t *code_relocate_ram = __section_begin("CodeRelocateRam");
   \                     ??init_data_bss_5: (+1)
   \   00000064   0x.... 0x....      LDR.W    R12,??DataTable2_25
    170              uint8_t *code_relocate = __section_begin("CodeRelocate");
   \   00000068   0x.... 0x....      LDR.W    LR,??DataTable2_26
    171              uint8_t *code_relocate_end = __section_end("CodeRelocate");
   \   0000006C   0x.... 0x....      LDR.W    R8,??DataTable2_27
    172          
    173              // Copy functions from ROM to RAM
    174              n = code_relocate_end - code_relocate;
   \   00000070   0xEBB8 0x090E      SUBS     R9,R8,LR
   \   00000074   0x464D             MOV      R5,R9
    175              while (n)
   \                     ??init_data_bss_6: (+1)
   \   00000076   0x2D00             CMP      R5,#+0
   \   00000078   0xD009             BEQ.N    ??init_data_bss_7
    176              {
    177                  *code_relocate_ram++ = *code_relocate++;
   \   0000007A   0xF89E 0x9000      LDRB     R9,[LR, #+0]
   \   0000007E   0xF88C 0x9000      STRB     R9,[R12, #+0]
   \   00000082   0xF11E 0x0E01      ADDS     LR,LR,#+1
   \   00000086   0xF11C 0x0C01      ADDS     R12,R12,#+1
    178                  n--;
   \   0000008A   0x1E6D             SUBS     R5,R5,#+1
   \   0000008C   0xE7F3             B.N      ??init_data_bss_6
    179              }
    180          #endif
    181          #endif /* !__CC_ARM && !__ICCARM__*/
    182          }
   \                     ??init_data_bss_7: (+1)
   \   0000008E   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    183          

   \                                 In section .text, align 2, keep-with-next
    184          void init_interrupts(void)
    185          {
   \                     init_interrupts: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    186              // Clear any IRQs that may be enabled, we only want the IRQs we enable to be active
    187              NVIC_ClearEnabledIRQs();
   \   00000002   0x.... 0x....      BL       NVIC_ClearEnabledIRQs
    188          
    189              // Clear any pending IRQs that may have been set
    190              NVIC_ClearAllPendingIRQs();
   \   00000006   0x.... 0x....      BL       NVIC_ClearAllPendingIRQs
    191          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000E184         DC32     0xe000e184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xE000E188         DC32     0xe000e188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xE000E18C         DC32     0xe000e18c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0xE000E190         DC32     0xe000e190

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0xE000E194         DC32     0xe000e194

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0xE000E198         DC32     0xe000e198

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0xE000E19C         DC32     0xe000e19c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0xE000E284         DC32     0xe000e284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0xE000E288         DC32     0xe000e288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0xE000E28C         DC32     0xe000e28c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0xE000E290         DC32     0xe000e290

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0xE000E294         DC32     0xe000e294

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0xE000E298         DC32     0xe000e298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0xE000E29C         DC32     0xe000e29c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     SFB(`.intvec`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     SFB(`.data`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     SFB(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     SFE(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0x........         DC32     SFB(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   0x........         DC32     SFE(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_23:
   \   00000000   0x........         DC32     SFB(USBGlobal)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_24:
   \   00000000   0x........         DC32     SFE(USBGlobal)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_25:
   \   00000000   0x........         DC32     SFB(CodeRelocateRam)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_26:
   \   00000000   0x........         DC32     SFB(CodeRelocate)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_27:
   \   00000000   0x........         DC32     SFE(CodeRelocate)
    192          
    193          ////////////////////////////////////////////////////////////////////////////////
    194          // EOF
    195          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_ClearAllPendingIRQs
       0   NVIC_ClearEnabledIRQs
      28   init_data_bss
       8   init_interrupts
         8   -> NVIC_ClearAllPendingIRQs
         8   -> NVIC_ClearEnabledIRQs


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_23
       4  ??DataTable2_24
       4  ??DataTable2_25
       4  ??DataTable2_26
       4  ??DataTable2_27
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      66  NVIC_ClearAllPendingIRQs
      66  NVIC_ClearEnabledIRQs
     146  init_data_bss
      12  init_interrupts

 
 402 bytes in section .text
 
 402 bytes of CODE memory

Errors: none
Warnings: none
