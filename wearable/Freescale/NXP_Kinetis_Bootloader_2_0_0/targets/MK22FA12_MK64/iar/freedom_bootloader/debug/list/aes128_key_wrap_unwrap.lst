###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       16/Sep/2016  13:23:51
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\security\src\aes128_key_wrap_unwrap.c
#    Command line =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\security\src\aes128_key_wrap_unwrap.c
#        -D NDEBUG -D USB_STACK_BM -D CPU_MK22FN1M0AVMC12 -D
#        CPU_IS_ARM_CORTEX_M4=1 -D IAR -D FREEDOM -D BL_TARGET_FLASH -D
#        TURINGSENSE=1 -lC
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa039,Pe068,Pe069,Pa082,Pe177,Pe186,Pe550,Pa050 -o
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../src\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../src/startup\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\..\..\..\..\src\platform\devices\MK22FA12_MK64\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/usb/include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/usb/osa\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/usb/device\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/usb/device/class\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/bm_usb\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/platform\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/platform/devices\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/platform/CMSIS/Include\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader/../../../../src/drivers/common\
#        -On --use_c++_inline
#    Locale       =  C
#    List file    =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\debug\list\aes128_key_wrap_unwrap.lst
#    Object file  =  
#        C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\targets\MK22FA12_MK64\iar\freedom_bootloader\debug\obj\aes128_key_wrap_unwrap.o
#
###############################################################################

C:\Freescale\NXP_Kinetis_Bootloader_2_0_0\NXP_Kinetis_Bootloader_2_0_0\src\security\src\aes128_key_wrap_unwrap.c
      1          /*
      2           * Copyright (c) 2014, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          #include "security/aes128_key_wrap_unwrap.h"
     31          #if !defined(BOOTLOADER_HOST)
     32          #include "security/aes_security.h"
     33          #endif
     34          
     35          #if defined(BOOTLOADER_HOST)
     36          // From bytes_aes.c.
     37          extern void Cipher(uint8_t cin[], uint32_t w[], int32_t nr, uint8_t cout[]);
     38          extern void InvCipher(uint8_t cin[], uint32_t w[], int32_t nr, uint8_t cout[]);
     39          #endif
     40          
     41          ////////////////////////////////////////////////////////////////////////////////
     42          // Definitions
     43          ////////////////////////////////////////////////////////////////////////////////
     44          
     45          //! @brief number of 64-bit data blocks
     46          #define N 5
     47          
     48          //! @brief 64-bit initialization vector

   \                                 In section .rodata, align 4
     49          static const uint8_t iv[8] = { 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6 };
   \                     iv:
   \   00000000   0xA6 0xA6          DC8 166, 166, 166, 166, 166, 166, 166, 166
   \              0xA6 0xA6    
   \              0xA6 0xA6    
   \              0xA6 0xA6    
     50          //! @brief 64-bit integrity check register

   \                                 In section .bss, align 4
     51          static uint8_t a[8];
   \                     a:
   \   00000000                      DS8 8
     52          //! @brief 8-bit array of 64-bit registers

   \                                 In section .bss, align 4
     53          static uint8_t r[8 * (N + 1)];
   \                     r:
   \   00000000                      DS8 48
     54          
     55          ////////////////////////////////////////////////////////////////////////////////
     56          // Code
     57          ////////////////////////////////////////////////////////////////////////////////
     58          
     59          // See aes128_key_wrap_unwrap.h for documentation on this function.

   \                                 In section .text, align 2, keep-with-next
     60          void do_aes128_key_wrap(const uint8_t plaintext[], uint8_t wrapped_ciphertext[], uint32_t expanded_kek[])
     61          {
   \                     do_aes128_key_wrap: (+1)
   \   00000000   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     62              uint32_t i, j;  // loop counters
     63              uint8_t in[16]; // 128-bit temporary plaintext input vector
     64          
     65              // step 1: initialize the byte-sized data variables
     66              // set A = IV
     67              // for i = 1 to n
     68              //     R[i] = P[i]
     69          
     70              a[0] = iv[0];
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable1
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000014   0x7008             STRB     R0,[R1, #+0]
     71              a[1] = iv[1];
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable1
   \   0000001A   0x7840             LDRB     R0,[R0, #+1]
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000020   0x7048             STRB     R0,[R1, #+1]
     72              a[2] = iv[2];
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable1
   \   00000026   0x7880             LDRB     R0,[R0, #+2]
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   0000002C   0x7088             STRB     R0,[R1, #+2]
     73              a[3] = iv[3];
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable1
   \   00000032   0x78C0             LDRB     R0,[R0, #+3]
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000038   0x70C8             STRB     R0,[R1, #+3]
     74              a[4] = iv[4];
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable1
   \   0000003E   0x7900             LDRB     R0,[R0, #+4]
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000044   0x7108             STRB     R0,[R1, #+4]
     75              a[5] = iv[5];
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable1
   \   0000004A   0x7940             LDRB     R0,[R0, #+5]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000050   0x7148             STRB     R0,[R1, #+5]
     76              a[6] = iv[6];
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable1
   \   00000056   0x7980             LDRB     R0,[R0, #+6]
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   0000005C   0x7188             STRB     R0,[R1, #+6]
     77              a[7] = iv[7];
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable1
   \   00000062   0x79C0             LDRB     R0,[R0, #+7]
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000068   0x71C8             STRB     R0,[R1, #+7]
     78          
     79              for (i = 1; i <= N; i++)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x4680             MOV      R8,R0
   \                     ??do_aes128_key_wrap_0: (+1)
   \   0000006E   0xF1B8 0x0F06      CMP      R8,#+6
   \   00000072   0xD249             BCS.N    ??do_aes128_key_wrap_1
     80              {
     81                  r[8 * i + 0] = plaintext[8 * (i - 1) + 0];
   \   00000074   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   00000078   0xF810 0x0C08      LDRB     R0,[R0, #-8]
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00000080   0xF801 0x0038      STRB     R0,[R1, R8, LSL #+3]
     82                  r[8 * i + 1] = plaintext[8 * (i - 1) + 1];
   \   00000084   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   00000088   0xF810 0x0C07      LDRB     R0,[R0, #-7]
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00000090   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000094   0x7048             STRB     R0,[R1, #+1]
     83                  r[8 * i + 2] = plaintext[8 * (i - 1) + 2];
   \   00000096   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   0000009A   0xF810 0x0C06      LDRB     R0,[R0, #-6]
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   000000A2   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000000A6   0x7088             STRB     R0,[R1, #+2]
     84                  r[8 * i + 3] = plaintext[8 * (i - 1) + 3];
   \   000000A8   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   000000AC   0xF810 0x0C05      LDRB     R0,[R0, #-5]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   000000B4   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000000B8   0x70C8             STRB     R0,[R1, #+3]
     85                  r[8 * i + 4] = plaintext[8 * (i - 1) + 4];
   \   000000BA   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   000000BE   0xF810 0x0C04      LDRB     R0,[R0, #-4]
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   000000C6   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000000CA   0x7108             STRB     R0,[R1, #+4]
     86                  r[8 * i + 5] = plaintext[8 * (i - 1) + 5];
   \   000000CC   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   000000D0   0xF810 0x0C03      LDRB     R0,[R0, #-3]
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   000000D8   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000000DC   0x7148             STRB     R0,[R1, #+5]
     87                  r[8 * i + 6] = plaintext[8 * (i - 1) + 6];
   \   000000DE   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   000000E2   0xF810 0x0C02      LDRB     R0,[R0, #-2]
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   000000EA   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000000EE   0x7188             STRB     R0,[R1, #+6]
     88                  r[8 * i + 7] = plaintext[8 * (i - 1) + 7];
   \   000000F0   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   000000F4   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   000000FC   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000100   0x71C8             STRB     R0,[R1, #+7]
     89              }
   \   00000102   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000106   0xE7B2             B.N      ??do_aes128_key_wrap_0
     90          
     91              // step 2: calculate intermediate values
     92              // for j = 0 to 5
     93              //     for i = 1 to n
     94              //         B = AES(K, A | R[i])
     95              //         A = MSB(64, B) ^ (n*j)+i
     96              //         R[i] = LSB(64, B)
     97          
     98              for (j = 0; j <= 5; j++)
   \                     ??do_aes128_key_wrap_1: (+1)
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x0007             MOVS     R7,R0
   \                     ??do_aes128_key_wrap_2: (+1)
   \   0000010C   0x2F06             CMP      R7,#+6
   \   0000010E   0xF080 0x80D2      BCS.W    ??do_aes128_key_wrap_3
     99              {
    100                  for (i = 1; i <= N; i++)
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0x4680             MOV      R8,R0
   \                     ??do_aes128_key_wrap_4: (+1)
   \   00000116   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000011A   0xF080 0x80CA      BCS.W    ??do_aes128_key_wrap_5
    101                  {
    102                      in[0] = a[0];
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000122   0x7800             LDRB     R0,[R0, #+0]
   \   00000124   0xF88D 0x0000      STRB     R0,[SP, #+0]
    103                      in[1] = a[1];
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   0000012C   0x7840             LDRB     R0,[R0, #+1]
   \   0000012E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    104                      in[2] = a[2];
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000136   0x7880             LDRB     R0,[R0, #+2]
   \   00000138   0xF88D 0x0002      STRB     R0,[SP, #+2]
    105                      in[3] = a[3];
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000140   0x78C0             LDRB     R0,[R0, #+3]
   \   00000142   0xF88D 0x0003      STRB     R0,[SP, #+3]
    106                      in[4] = a[4];
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   0000014A   0x7900             LDRB     R0,[R0, #+4]
   \   0000014C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    107                      in[5] = a[5];
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000154   0x7940             LDRB     R0,[R0, #+5]
   \   00000156   0xF88D 0x0005      STRB     R0,[SP, #+5]
    108                      in[6] = a[6];
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   0000015E   0x7980             LDRB     R0,[R0, #+6]
   \   00000160   0xF88D 0x0006      STRB     R0,[SP, #+6]
    109                      in[7] = a[7];
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000168   0x79C0             LDRB     R0,[R0, #+7]
   \   0000016A   0xF88D 0x0007      STRB     R0,[SP, #+7]
    110          
    111                      in[8] = r[8 * i + 0];
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000172   0xF810 0x0038      LDRB     R0,[R0, R8, LSL #+3]
   \   00000176   0xF88D 0x0008      STRB     R0,[SP, #+8]
    112                      in[9] = r[8 * i + 1];
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   0000017E   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000182   0x7840             LDRB     R0,[R0, #+1]
   \   00000184   0xF88D 0x0009      STRB     R0,[SP, #+9]
    113                      in[10] = r[8 * i + 2];
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   0000018C   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000190   0x7880             LDRB     R0,[R0, #+2]
   \   00000192   0xF88D 0x000A      STRB     R0,[SP, #+10]
    114                      in[11] = r[8 * i + 3];
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   0000019A   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   0000019E   0x78C0             LDRB     R0,[R0, #+3]
   \   000001A0   0xF88D 0x000B      STRB     R0,[SP, #+11]
    115                      in[12] = r[8 * i + 4];
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   000001A8   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   000001AC   0x7900             LDRB     R0,[R0, #+4]
   \   000001AE   0xF88D 0x000C      STRB     R0,[SP, #+12]
    116                      in[13] = r[8 * i + 5];
   \   000001B2   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   000001B6   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   000001BA   0x7940             LDRB     R0,[R0, #+5]
   \   000001BC   0xF88D 0x000D      STRB     R0,[SP, #+13]
    117                      in[14] = r[8 * i + 6];
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   000001C4   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   000001C8   0x7980             LDRB     R0,[R0, #+6]
   \   000001CA   0xF88D 0x000E      STRB     R0,[SP, #+14]
    118                      in[15] = r[8 * i + 7];
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   000001D2   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   000001D6   0x79C0             LDRB     R0,[R0, #+7]
   \   000001D8   0xF88D 0x000F      STRB     R0,[SP, #+15]
    119          
    120          #if defined BOOTLOADER_HOST
    121                      Cipher(in, expanded_kek, 10, in); // perform aes128 encryption
    122          #else
    123                      aes_encrypt((uint32_t *)in, expanded_kek, (uint32_t *)in);
   \   000001DC   0x466A             MOV      R2,SP
   \   000001DE   0x0031             MOVS     R1,R6
   \   000001E0   0x4668             MOV      R0,SP
   \   000001E2   0x.... 0x....      BL       aes_encrypt
    124          #endif // BOOTLOADER_HOST
    125          
    126                      a[0] = in[0];
   \   000001E6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   000001EE   0x7008             STRB     R0,[R1, #+0]
    127                      a[1] = in[1];
   \   000001F0   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001F4   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   000001F8   0x7048             STRB     R0,[R1, #+1]
    128                      a[2] = in[2];
   \   000001FA   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000202   0x7088             STRB     R0,[R1, #+2]
    129                      a[3] = in[3];
   \   00000204   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000208   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   0000020C   0x70C8             STRB     R0,[R1, #+3]
    130                      a[4] = in[4];
   \   0000020E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000216   0x7108             STRB     R0,[R1, #+4]
    131                      a[5] = in[5];
   \   00000218   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000021C   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000220   0x7148             STRB     R0,[R1, #+5]
    132                      a[6] = in[6];
   \   00000222   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000226   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   0000022A   0x7188             STRB     R0,[R1, #+6]
    133                      a[7] = in[7] ^ ((N * j) + i);
   \   0000022C   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   00000230   0x2105             MOVS     R1,#+5
   \   00000232   0xFB01 0x8107      MLA      R1,R1,R7,R8
   \   00000236   0x4048             EORS     R0,R1,R0
   \   00000238   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   0000023C   0x71C8             STRB     R0,[R1, #+7]
    134          
    135                      r[8 * i + 0] = in[8];
   \   0000023E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000242   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00000246   0xF801 0x0038      STRB     R0,[R1, R8, LSL #+3]
    136                      r[8 * i + 1] = in[9];
   \   0000024A   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   0000024E   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00000252   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000256   0x7048             STRB     R0,[R1, #+1]
    137                      r[8 * i + 2] = in[10];
   \   00000258   0xF89D 0x000A      LDRB     R0,[SP, #+10]
   \   0000025C   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00000260   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000264   0x7088             STRB     R0,[R1, #+2]
    138                      r[8 * i + 3] = in[11];
   \   00000266   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   0000026A   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   0000026E   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000272   0x70C8             STRB     R0,[R1, #+3]
    139                      r[8 * i + 4] = in[12];
   \   00000274   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000278   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   0000027C   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000280   0x7108             STRB     R0,[R1, #+4]
    140                      r[8 * i + 5] = in[13];
   \   00000282   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   00000286   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   0000028A   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   0000028E   0x7148             STRB     R0,[R1, #+5]
    141                      r[8 * i + 6] = in[14];
   \   00000290   0xF89D 0x000E      LDRB     R0,[SP, #+14]
   \   00000294   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00000298   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   0000029C   0x7188             STRB     R0,[R1, #+6]
    142                      r[8 * i + 7] = in[15];
   \   0000029E   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   000002A2   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   000002A6   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000002AA   0x71C8             STRB     R0,[R1, #+7]
    143                  } // end for (i)
   \   000002AC   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000002B0   0xE731             B.N      ??do_aes128_key_wrap_4
    144              }     // end for (j)
   \                     ??do_aes128_key_wrap_5: (+1)
   \   000002B2   0x1C7F             ADDS     R7,R7,#+1
   \   000002B4   0xE72A             B.N      ??do_aes128_key_wrap_2
    145          
    146              // step 3: output the results
    147              // set C[0] = A
    148              // for i = 1 to n
    149              //     C[i] = R[i]
    150          
    151              wrapped_ciphertext[0] = a[0];
   \                     ??do_aes128_key_wrap_3: (+1)
   \   000002B6   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000002BA   0x7800             LDRB     R0,[R0, #+0]
   \   000002BC   0x7028             STRB     R0,[R5, #+0]
    152              wrapped_ciphertext[1] = a[1];
   \   000002BE   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000002C2   0x7840             LDRB     R0,[R0, #+1]
   \   000002C4   0x7068             STRB     R0,[R5, #+1]
    153              wrapped_ciphertext[2] = a[2];
   \   000002C6   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000002CA   0x7880             LDRB     R0,[R0, #+2]
   \   000002CC   0x70A8             STRB     R0,[R5, #+2]
    154              wrapped_ciphertext[3] = a[3];
   \   000002CE   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000002D2   0x78C0             LDRB     R0,[R0, #+3]
   \   000002D4   0x70E8             STRB     R0,[R5, #+3]
    155              wrapped_ciphertext[4] = a[4];
   \   000002D6   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000002DA   0x7900             LDRB     R0,[R0, #+4]
   \   000002DC   0x7128             STRB     R0,[R5, #+4]
    156              wrapped_ciphertext[5] = a[5];
   \   000002DE   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000002E2   0x7940             LDRB     R0,[R0, #+5]
   \   000002E4   0x7168             STRB     R0,[R5, #+5]
    157              wrapped_ciphertext[6] = a[6];
   \   000002E6   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000002EA   0x7980             LDRB     R0,[R0, #+6]
   \   000002EC   0x71A8             STRB     R0,[R5, #+6]
    158              wrapped_ciphertext[7] = a[7];
   \   000002EE   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000002F2   0x79C0             LDRB     R0,[R0, #+7]
   \   000002F4   0x71E8             STRB     R0,[R5, #+7]
    159          
    160              for (i = 1; i <= N; i++)
   \   000002F6   0x2001             MOVS     R0,#+1
   \   000002F8   0x4680             MOV      R8,R0
   \                     ??do_aes128_key_wrap_6: (+1)
   \   000002FA   0xF1B8 0x0F06      CMP      R8,#+6
   \   000002FE   0xD240             BCS.N    ??do_aes128_key_wrap_7
    161              {
    162                  wrapped_ciphertext[8 * i + 0] = r[8 * i + 0];
   \   00000300   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000304   0xF810 0x0038      LDRB     R0,[R0, R8, LSL #+3]
   \   00000308   0xF805 0x0038      STRB     R0,[R5, R8, LSL #+3]
    163                  wrapped_ciphertext[8 * i + 1] = r[8 * i + 1];
   \   0000030C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000310   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000314   0x7840             LDRB     R0,[R0, #+1]
   \   00000316   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   0000031A   0x7048             STRB     R0,[R1, #+1]
    164                  wrapped_ciphertext[8 * i + 2] = r[8 * i + 2];
   \   0000031C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000320   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000324   0x7880             LDRB     R0,[R0, #+2]
   \   00000326   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   0000032A   0x7088             STRB     R0,[R1, #+2]
    165                  wrapped_ciphertext[8 * i + 3] = r[8 * i + 3];
   \   0000032C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000330   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000334   0x78C0             LDRB     R0,[R0, #+3]
   \   00000336   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   0000033A   0x70C8             STRB     R0,[R1, #+3]
    166                  wrapped_ciphertext[8 * i + 4] = r[8 * i + 4];
   \   0000033C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000340   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000344   0x7900             LDRB     R0,[R0, #+4]
   \   00000346   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   0000034A   0x7108             STRB     R0,[R1, #+4]
    167                  wrapped_ciphertext[8 * i + 5] = r[8 * i + 5];
   \   0000034C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000350   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000354   0x7940             LDRB     R0,[R0, #+5]
   \   00000356   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   0000035A   0x7148             STRB     R0,[R1, #+5]
    168                  wrapped_ciphertext[8 * i + 6] = r[8 * i + 6];
   \   0000035C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000360   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000364   0x7980             LDRB     R0,[R0, #+6]
   \   00000366   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   0000036A   0x7188             STRB     R0,[R1, #+6]
    169                  wrapped_ciphertext[8 * i + 7] = r[8 * i + 7];
   \   0000036C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000370   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000374   0x79C0             LDRB     R0,[R0, #+7]
   \   00000376   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   0000037A   0x71C8             STRB     R0,[R1, #+7]
    170              }
   \   0000037C   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000380   0xE7BB             B.N      ??do_aes128_key_wrap_6
    171          }
   \                     ??do_aes128_key_wrap_7: (+1)
   \   00000382   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return
    172          
    173          //******************************************************************************
    174          //******************************************************************************
    175          
    176          // See aes128_key_wrap_unwrap.h for documentation on this function.

   \                                 In section .text, align 2, keep-with-next
    177          uint32_t do_aes128_key_unwrap(const uint8_t wrapped_ciphertext[],
    178                                        uint8_t unwrapped_plaintext[],
    179                                        uint32_t expanded_kek[])
    180          {
   \                     do_aes128_key_unwrap: (+1)
   \   00000000   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    181              int32_t i, j;   // loop counters
    182              uint8_t in[16]; // 128-bit temporary ciphertext input vector
    183          
    184              // step 1: initialize variables
    185              // set A = C[0]
    186              // for i = 1 to n
    187              //     R[i] = C[i]
    188          
    189              a[0] = wrapped_ciphertext[0];
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable1_1
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    190              a[1] = wrapped_ciphertext[1];
   \   00000010   0x7860             LDRB     R0,[R4, #+1]
   \   00000012   0x....             LDR.N    R1,??DataTable1_1
   \   00000014   0x7048             STRB     R0,[R1, #+1]
    191              a[2] = wrapped_ciphertext[2];
   \   00000016   0x78A0             LDRB     R0,[R4, #+2]
   \   00000018   0x....             LDR.N    R1,??DataTable1_1
   \   0000001A   0x7088             STRB     R0,[R1, #+2]
    192              a[3] = wrapped_ciphertext[3];
   \   0000001C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001E   0x....             LDR.N    R1,??DataTable1_1
   \   00000020   0x70C8             STRB     R0,[R1, #+3]
    193              a[4] = wrapped_ciphertext[4];
   \   00000022   0x7920             LDRB     R0,[R4, #+4]
   \   00000024   0x....             LDR.N    R1,??DataTable1_1
   \   00000026   0x7108             STRB     R0,[R1, #+4]
    194              a[5] = wrapped_ciphertext[5];
   \   00000028   0x7960             LDRB     R0,[R4, #+5]
   \   0000002A   0x....             LDR.N    R1,??DataTable1_1
   \   0000002C   0x7148             STRB     R0,[R1, #+5]
    195              a[6] = wrapped_ciphertext[6];
   \   0000002E   0x79A0             LDRB     R0,[R4, #+6]
   \   00000030   0x....             LDR.N    R1,??DataTable1_1
   \   00000032   0x7188             STRB     R0,[R1, #+6]
    196              a[7] = wrapped_ciphertext[7];
   \   00000034   0x79E0             LDRB     R0,[R4, #+7]
   \   00000036   0x....             LDR.N    R1,??DataTable1_1
   \   00000038   0x71C8             STRB     R0,[R1, #+7]
    197          
    198              for (i = 1; i <= N; i++)
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x4680             MOV      R8,R0
   \                     ??do_aes128_key_unwrap_0: (+1)
   \   0000003E   0xF1B8 0x0F06      CMP      R8,#+6
   \   00000042   0xDA38             BGE.N    ??do_aes128_key_unwrap_1
    199              {
    200                  r[8 * i + 0] = wrapped_ciphertext[8 * i + 0];
   \   00000044   0xF814 0x0038      LDRB     R0,[R4, R8, LSL #+3]
   \   00000048   0x....             LDR.N    R1,??DataTable1_2
   \   0000004A   0xF801 0x0038      STRB     R0,[R1, R8, LSL #+3]
    201                  r[8 * i + 1] = wrapped_ciphertext[8 * i + 1];
   \   0000004E   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   00000052   0x7840             LDRB     R0,[R0, #+1]
   \   00000054   0x....             LDR.N    R1,??DataTable1_2
   \   00000056   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   0000005A   0x7048             STRB     R0,[R1, #+1]
    202                  r[8 * i + 2] = wrapped_ciphertext[8 * i + 2];
   \   0000005C   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   00000060   0x7880             LDRB     R0,[R0, #+2]
   \   00000062   0x....             LDR.N    R1,??DataTable1_2
   \   00000064   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000068   0x7088             STRB     R0,[R1, #+2]
    203                  r[8 * i + 3] = wrapped_ciphertext[8 * i + 3];
   \   0000006A   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   0000006E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000070   0x....             LDR.N    R1,??DataTable1_2
   \   00000072   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000076   0x70C8             STRB     R0,[R1, #+3]
    204                  r[8 * i + 4] = wrapped_ciphertext[8 * i + 4];
   \   00000078   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   0000007C   0x7900             LDRB     R0,[R0, #+4]
   \   0000007E   0x....             LDR.N    R1,??DataTable1_2
   \   00000080   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000084   0x7108             STRB     R0,[R1, #+4]
    205                  r[8 * i + 5] = wrapped_ciphertext[8 * i + 5];
   \   00000086   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   0000008A   0x7940             LDRB     R0,[R0, #+5]
   \   0000008C   0x....             LDR.N    R1,??DataTable1_2
   \   0000008E   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000092   0x7148             STRB     R0,[R1, #+5]
    206                  r[8 * i + 6] = wrapped_ciphertext[8 * i + 6];
   \   00000094   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   00000098   0x7980             LDRB     R0,[R0, #+6]
   \   0000009A   0x....             LDR.N    R1,??DataTable1_2
   \   0000009C   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000000A0   0x7188             STRB     R0,[R1, #+6]
    207                  r[8 * i + 7] = wrapped_ciphertext[8 * i + 7];
   \   000000A2   0xEB04 0x00C8      ADD      R0,R4,R8, LSL #+3
   \   000000A6   0x79C0             LDRB     R0,[R0, #+7]
   \   000000A8   0x....             LDR.N    R1,??DataTable1_2
   \   000000AA   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000000AE   0x71C8             STRB     R0,[R1, #+7]
    208              }
   \   000000B0   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000B4   0xE7C3             B.N      ??do_aes128_key_unwrap_0
    209          
    210              // step 2: calculate intermediate values
    211              // for j = 5 to 0
    212              //     for i = n to 1
    213              //         B = AES-1(K, (A ^ (n*j+i) | R[i])
    214              //         A = MSB(64, B)
    215              //         R[i] = LSB(64, B)
    216          
    217              for (j = 5; j >= 0; j--)
   \                     ??do_aes128_key_unwrap_1: (+1)
   \   000000B6   0x2005             MOVS     R0,#+5
   \   000000B8   0x0007             MOVS     R7,R0
   \                     ??do_aes128_key_unwrap_2: (+1)
   \   000000BA   0x2F00             CMP      R7,#+0
   \   000000BC   0xF100 0x80B2      BMI.W    ??do_aes128_key_unwrap_3
    218              {
    219                  for (i = N; i >= 1; i--)
   \   000000C0   0x2005             MOVS     R0,#+5
   \   000000C2   0x4680             MOV      R8,R0
   \                     ??do_aes128_key_unwrap_4: (+1)
   \   000000C4   0xF1B8 0x0F01      CMP      R8,#+1
   \   000000C8   0xF2C0 0x80AA      BLT.W    ??do_aes128_key_unwrap_5
    220                  {
    221                      in[0] = a[0];
   \   000000CC   0x....             LDR.N    R0,??DataTable1_1
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0xF88D 0x0000      STRB     R0,[SP, #+0]
    222                      in[1] = a[1];
   \   000000D4   0x....             LDR.N    R0,??DataTable1_1
   \   000000D6   0x7840             LDRB     R0,[R0, #+1]
   \   000000D8   0xF88D 0x0001      STRB     R0,[SP, #+1]
    223                      in[2] = a[2];
   \   000000DC   0x....             LDR.N    R0,??DataTable1_1
   \   000000DE   0x7880             LDRB     R0,[R0, #+2]
   \   000000E0   0xF88D 0x0002      STRB     R0,[SP, #+2]
    224                      in[3] = a[3];
   \   000000E4   0x....             LDR.N    R0,??DataTable1_1
   \   000000E6   0x78C0             LDRB     R0,[R0, #+3]
   \   000000E8   0xF88D 0x0003      STRB     R0,[SP, #+3]
    225                      in[4] = a[4];
   \   000000EC   0x....             LDR.N    R0,??DataTable1_1
   \   000000EE   0x7900             LDRB     R0,[R0, #+4]
   \   000000F0   0xF88D 0x0004      STRB     R0,[SP, #+4]
    226                      in[5] = a[5];
   \   000000F4   0x....             LDR.N    R0,??DataTable1_1
   \   000000F6   0x7940             LDRB     R0,[R0, #+5]
   \   000000F8   0xF88D 0x0005      STRB     R0,[SP, #+5]
    227                      in[6] = a[6];
   \   000000FC   0x....             LDR.N    R0,??DataTable1_1
   \   000000FE   0x7980             LDRB     R0,[R0, #+6]
   \   00000100   0xF88D 0x0006      STRB     R0,[SP, #+6]
    228                      in[7] = a[7] ^ ((N * j) + i);
   \   00000104   0x....             LDR.N    R0,??DataTable1_1
   \   00000106   0x79C0             LDRB     R0,[R0, #+7]
   \   00000108   0x2105             MOVS     R1,#+5
   \   0000010A   0xFB01 0x8107      MLA      R1,R1,R7,R8
   \   0000010E   0x4048             EORS     R0,R1,R0
   \   00000110   0xF88D 0x0007      STRB     R0,[SP, #+7]
    229          
    230                      in[8] = r[8 * i + 0];
   \   00000114   0x....             LDR.N    R0,??DataTable1_2
   \   00000116   0xF810 0x0038      LDRB     R0,[R0, R8, LSL #+3]
   \   0000011A   0xF88D 0x0008      STRB     R0,[SP, #+8]
    231                      in[9] = r[8 * i + 1];
   \   0000011E   0x....             LDR.N    R0,??DataTable1_2
   \   00000120   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000124   0x7840             LDRB     R0,[R0, #+1]
   \   00000126   0xF88D 0x0009      STRB     R0,[SP, #+9]
    232                      in[10] = r[8 * i + 2];
   \   0000012A   0x....             LDR.N    R0,??DataTable1_2
   \   0000012C   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000130   0x7880             LDRB     R0,[R0, #+2]
   \   00000132   0xF88D 0x000A      STRB     R0,[SP, #+10]
    233                      in[11] = r[8 * i + 3];
   \   00000136   0x....             LDR.N    R0,??DataTable1_2
   \   00000138   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   0000013C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000013E   0xF88D 0x000B      STRB     R0,[SP, #+11]
    234                      in[12] = r[8 * i + 4];
   \   00000142   0x....             LDR.N    R0,??DataTable1_2
   \   00000144   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000148   0x7900             LDRB     R0,[R0, #+4]
   \   0000014A   0xF88D 0x000C      STRB     R0,[SP, #+12]
    235                      in[13] = r[8 * i + 5];
   \   0000014E   0x....             LDR.N    R0,??DataTable1_2
   \   00000150   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000154   0x7940             LDRB     R0,[R0, #+5]
   \   00000156   0xF88D 0x000D      STRB     R0,[SP, #+13]
    236                      in[14] = r[8 * i + 6];
   \   0000015A   0x....             LDR.N    R0,??DataTable1_2
   \   0000015C   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000160   0x7980             LDRB     R0,[R0, #+6]
   \   00000162   0xF88D 0x000E      STRB     R0,[SP, #+14]
    237                      in[15] = r[8 * i + 7];
   \   00000166   0x....             LDR.N    R0,??DataTable1_2
   \   00000168   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   0000016C   0x79C0             LDRB     R0,[R0, #+7]
   \   0000016E   0xF88D 0x000F      STRB     R0,[SP, #+15]
    238          
    239          #if defined BOOTLOADER_HOST
    240                      InvCipher(in, expanded_kek, 10, in); // perform aes128 decryption
    241          #else
    242                      // TODO aes_decrypt reverses bytes(?)
    243                      aes_decrypt((uint32_t *)in, expanded_kek, (uint32_t *)in);
   \   00000172   0x466A             MOV      R2,SP
   \   00000174   0x0031             MOVS     R1,R6
   \   00000176   0x4668             MOV      R0,SP
   \   00000178   0x.... 0x....      BL       aes_decrypt
    244          #endif // BOOTLOADER_HOST
    245          
    246                      a[0] = in[0];
   \   0000017C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000180   0x....             LDR.N    R1,??DataTable1_1
   \   00000182   0x7008             STRB     R0,[R1, #+0]
    247                      a[1] = in[1];
   \   00000184   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000188   0x....             LDR.N    R1,??DataTable1_1
   \   0000018A   0x7048             STRB     R0,[R1, #+1]
    248                      a[2] = in[2];
   \   0000018C   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000190   0x....             LDR.N    R1,??DataTable1_1
   \   00000192   0x7088             STRB     R0,[R1, #+2]
    249                      a[3] = in[3];
   \   00000194   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000198   0x....             LDR.N    R1,??DataTable1_1
   \   0000019A   0x70C8             STRB     R0,[R1, #+3]
    250                      a[4] = in[4];
   \   0000019C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001A0   0x....             LDR.N    R1,??DataTable1_1
   \   000001A2   0x7108             STRB     R0,[R1, #+4]
    251                      a[5] = in[5];
   \   000001A4   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   000001A8   0x....             LDR.N    R1,??DataTable1_1
   \   000001AA   0x7148             STRB     R0,[R1, #+5]
    252                      a[6] = in[6];
   \   000001AC   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000001B0   0x....             LDR.N    R1,??DataTable1_1
   \   000001B2   0x7188             STRB     R0,[R1, #+6]
    253                      a[7] = in[7];
   \   000001B4   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   000001B8   0x....             LDR.N    R1,??DataTable1_1
   \   000001BA   0x71C8             STRB     R0,[R1, #+7]
    254          
    255                      r[8 * i + 0] = in[8];
   \   000001BC   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000001C0   0x....             LDR.N    R1,??DataTable1_2
   \   000001C2   0xF801 0x0038      STRB     R0,[R1, R8, LSL #+3]
    256                      r[8 * i + 1] = in[9];
   \   000001C6   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   000001CA   0x....             LDR.N    R1,??DataTable1_2
   \   000001CC   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000001D0   0x7048             STRB     R0,[R1, #+1]
    257                      r[8 * i + 2] = in[10];
   \   000001D2   0xF89D 0x000A      LDRB     R0,[SP, #+10]
   \   000001D6   0x....             LDR.N    R1,??DataTable1_2
   \   000001D8   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000001DC   0x7088             STRB     R0,[R1, #+2]
    258                      r[8 * i + 3] = in[11];
   \   000001DE   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   000001E2   0x....             LDR.N    R1,??DataTable1_2
   \   000001E4   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000001E8   0x70C8             STRB     R0,[R1, #+3]
    259                      r[8 * i + 4] = in[12];
   \   000001EA   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   000001EE   0x....             LDR.N    R1,??DataTable1_2
   \   000001F0   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   000001F4   0x7108             STRB     R0,[R1, #+4]
    260                      r[8 * i + 5] = in[13];
   \   000001F6   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   000001FA   0x....             LDR.N    R1,??DataTable1_2
   \   000001FC   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000200   0x7148             STRB     R0,[R1, #+5]
    261                      r[8 * i + 6] = in[14];
   \   00000202   0xF89D 0x000E      LDRB     R0,[SP, #+14]
   \   00000206   0x....             LDR.N    R1,??DataTable1_2
   \   00000208   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   0000020C   0x7188             STRB     R0,[R1, #+6]
    262                      r[8 * i + 7] = in[15];
   \   0000020E   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   00000212   0x....             LDR.N    R1,??DataTable1_2
   \   00000214   0xEB01 0x01C8      ADD      R1,R1,R8, LSL #+3
   \   00000218   0x71C8             STRB     R0,[R1, #+7]
    263                  } // end for (i)
   \   0000021A   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   0000021E   0xE751             B.N      ??do_aes128_key_unwrap_4
    264              }     // end for (j)
   \                     ??do_aes128_key_unwrap_5: (+1)
   \   00000220   0x1E7F             SUBS     R7,R7,#+1
   \   00000222   0xE74A             B.N      ??do_aes128_key_unwrap_2
    265          
    266              // step 3: output the results
    267              // if A == IV
    268              //    then
    269              //         for i = 1 to n
    270              //             P[i] = R[i]
    271              //    else
    272              //         return an error
    273          
    274              unwrapped_plaintext[0] = a[0];
   \                     ??do_aes128_key_unwrap_3: (+1)
   \   00000224   0x....             LDR.N    R0,??DataTable1_1
   \   00000226   0x7800             LDRB     R0,[R0, #+0]
   \   00000228   0x7028             STRB     R0,[R5, #+0]
    275              unwrapped_plaintext[1] = a[1];
   \   0000022A   0x....             LDR.N    R0,??DataTable1_1
   \   0000022C   0x7840             LDRB     R0,[R0, #+1]
   \   0000022E   0x7068             STRB     R0,[R5, #+1]
    276              unwrapped_plaintext[2] = a[2];
   \   00000230   0x....             LDR.N    R0,??DataTable1_1
   \   00000232   0x7880             LDRB     R0,[R0, #+2]
   \   00000234   0x70A8             STRB     R0,[R5, #+2]
    277              unwrapped_plaintext[3] = a[3];
   \   00000236   0x....             LDR.N    R0,??DataTable1_1
   \   00000238   0x78C0             LDRB     R0,[R0, #+3]
   \   0000023A   0x70E8             STRB     R0,[R5, #+3]
    278              unwrapped_plaintext[4] = a[4];
   \   0000023C   0x....             LDR.N    R0,??DataTable1_1
   \   0000023E   0x7900             LDRB     R0,[R0, #+4]
   \   00000240   0x7128             STRB     R0,[R5, #+4]
    279              unwrapped_plaintext[5] = a[5];
   \   00000242   0x....             LDR.N    R0,??DataTable1_1
   \   00000244   0x7940             LDRB     R0,[R0, #+5]
   \   00000246   0x7168             STRB     R0,[R5, #+5]
    280              unwrapped_plaintext[6] = a[6];
   \   00000248   0x....             LDR.N    R0,??DataTable1_1
   \   0000024A   0x7980             LDRB     R0,[R0, #+6]
   \   0000024C   0x71A8             STRB     R0,[R5, #+6]
    281              unwrapped_plaintext[7] = a[7];
   \   0000024E   0x....             LDR.N    R0,??DataTable1_1
   \   00000250   0x79C0             LDRB     R0,[R0, #+7]
   \   00000252   0x71E8             STRB     R0,[R5, #+7]
    282          
    283              for (i = 1; i <= N; i++)
   \   00000254   0x2001             MOVS     R0,#+1
   \   00000256   0x4680             MOV      R8,R0
   \                     ??do_aes128_key_unwrap_6: (+1)
   \   00000258   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000025C   0xDA38             BGE.N    ??do_aes128_key_unwrap_7
    284              {
    285                  unwrapped_plaintext[8 * i + 0] = r[8 * i + 0];
   \   0000025E   0x....             LDR.N    R0,??DataTable1_2
   \   00000260   0xF810 0x0038      LDRB     R0,[R0, R8, LSL #+3]
   \   00000264   0xF805 0x0038      STRB     R0,[R5, R8, LSL #+3]
    286                  unwrapped_plaintext[8 * i + 1] = r[8 * i + 1];
   \   00000268   0x....             LDR.N    R0,??DataTable1_2
   \   0000026A   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   0000026E   0x7840             LDRB     R0,[R0, #+1]
   \   00000270   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   00000274   0x7048             STRB     R0,[R1, #+1]
    287                  unwrapped_plaintext[8 * i + 2] = r[8 * i + 2];
   \   00000276   0x....             LDR.N    R0,??DataTable1_2
   \   00000278   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   0000027C   0x7880             LDRB     R0,[R0, #+2]
   \   0000027E   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   00000282   0x7088             STRB     R0,[R1, #+2]
    288                  unwrapped_plaintext[8 * i + 3] = r[8 * i + 3];
   \   00000284   0x....             LDR.N    R0,??DataTable1_2
   \   00000286   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   0000028A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000028C   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   00000290   0x70C8             STRB     R0,[R1, #+3]
    289                  unwrapped_plaintext[8 * i + 4] = r[8 * i + 4];
   \   00000292   0x....             LDR.N    R0,??DataTable1_2
   \   00000294   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   00000298   0x7900             LDRB     R0,[R0, #+4]
   \   0000029A   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   0000029E   0x7108             STRB     R0,[R1, #+4]
    290                  unwrapped_plaintext[8 * i + 5] = r[8 * i + 5];
   \   000002A0   0x....             LDR.N    R0,??DataTable1_2
   \   000002A2   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   000002A6   0x7940             LDRB     R0,[R0, #+5]
   \   000002A8   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   000002AC   0x7148             STRB     R0,[R1, #+5]
    291                  unwrapped_plaintext[8 * i + 6] = r[8 * i + 6];
   \   000002AE   0x....             LDR.N    R0,??DataTable1_2
   \   000002B0   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   000002B4   0x7980             LDRB     R0,[R0, #+6]
   \   000002B6   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   000002BA   0x7188             STRB     R0,[R1, #+6]
    292                  unwrapped_plaintext[8 * i + 7] = r[8 * i + 7];
   \   000002BC   0x....             LDR.N    R0,??DataTable1_2
   \   000002BE   0xEB00 0x00C8      ADD      R0,R0,R8, LSL #+3
   \   000002C2   0x79C0             LDRB     R0,[R0, #+7]
   \   000002C4   0xEB05 0x01C8      ADD      R1,R5,R8, LSL #+3
   \   000002C8   0x71C8             STRB     R0,[R1, #+7]
    293              }
   \   000002CA   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000002CE   0xE7C3             B.N      ??do_aes128_key_unwrap_6
    294          
    295              if ((unwrapped_plaintext[0] == iv[0]) && (unwrapped_plaintext[1] == iv[1]) && (unwrapped_plaintext[2] == iv[2]) &&
    296                  (unwrapped_plaintext[3] == iv[3]) && (unwrapped_plaintext[4] == iv[4]) && (unwrapped_plaintext[5] == iv[5]) &&
    297                  (unwrapped_plaintext[6] == iv[6]) && (unwrapped_plaintext[7] == iv[7]))
   \                     ??do_aes128_key_unwrap_7: (+1)
   \   000002D0   0x7828             LDRB     R0,[R5, #+0]
   \   000002D2   0x....             LDR.N    R1,??DataTable1
   \   000002D4   0x7809             LDRB     R1,[R1, #+0]
   \   000002D6   0x4288             CMP      R0,R1
   \   000002D8   0xD124             BNE.N    ??do_aes128_key_unwrap_8
   \   000002DA   0x7868             LDRB     R0,[R5, #+1]
   \   000002DC   0x....             LDR.N    R1,??DataTable1
   \   000002DE   0x7849             LDRB     R1,[R1, #+1]
   \   000002E0   0x4288             CMP      R0,R1
   \   000002E2   0xD11F             BNE.N    ??do_aes128_key_unwrap_8
   \   000002E4   0x78A8             LDRB     R0,[R5, #+2]
   \   000002E6   0x....             LDR.N    R1,??DataTable1
   \   000002E8   0x7889             LDRB     R1,[R1, #+2]
   \   000002EA   0x4288             CMP      R0,R1
   \   000002EC   0xD11A             BNE.N    ??do_aes128_key_unwrap_8
   \   000002EE   0x78E8             LDRB     R0,[R5, #+3]
   \   000002F0   0x....             LDR.N    R1,??DataTable1
   \   000002F2   0x78C9             LDRB     R1,[R1, #+3]
   \   000002F4   0x4288             CMP      R0,R1
   \   000002F6   0xD115             BNE.N    ??do_aes128_key_unwrap_8
   \   000002F8   0x7928             LDRB     R0,[R5, #+4]
   \   000002FA   0x....             LDR.N    R1,??DataTable1
   \   000002FC   0x7909             LDRB     R1,[R1, #+4]
   \   000002FE   0x4288             CMP      R0,R1
   \   00000300   0xD110             BNE.N    ??do_aes128_key_unwrap_8
   \   00000302   0x7968             LDRB     R0,[R5, #+5]
   \   00000304   0x....             LDR.N    R1,??DataTable1
   \   00000306   0x7949             LDRB     R1,[R1, #+5]
   \   00000308   0x4288             CMP      R0,R1
   \   0000030A   0xD10B             BNE.N    ??do_aes128_key_unwrap_8
   \   0000030C   0x79A8             LDRB     R0,[R5, #+6]
   \   0000030E   0x....             LDR.N    R1,??DataTable1
   \   00000310   0x7989             LDRB     R1,[R1, #+6]
   \   00000312   0x4288             CMP      R0,R1
   \   00000314   0xD106             BNE.N    ??do_aes128_key_unwrap_8
   \   00000316   0x79E8             LDRB     R0,[R5, #+7]
   \   00000318   0x....             LDR.N    R1,??DataTable1
   \   0000031A   0x79C9             LDRB     R1,[R1, #+7]
   \   0000031C   0x4288             CMP      R0,R1
   \   0000031E   0xD101             BNE.N    ??do_aes128_key_unwrap_8
    298                  return 0; // error-free exit
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0xE001             B.N      ??do_aes128_key_unwrap_9
    299              else
    300                  return (uint32_t)-1; // error exit
   \                     ??do_aes128_key_unwrap_8: (+1)
   \   00000324   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??do_aes128_key_unwrap_9: (+1)
   \   00000328   0xB004             ADD      SP,SP,#+16
   \   0000032A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    301          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     iv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     r
    302          
    303          ////////////////////////////////////////////////////////////////////////////////
    304          // EOF
    305          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   do_aes128_key_unwrap
        40   -> aes_decrypt
      40   do_aes128_key_wrap
        40   -> aes_encrypt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       8  a
     814  do_aes128_key_unwrap
     902  do_aes128_key_wrap
       8  iv
      48  r

 
    56 bytes in section .bss
     8 bytes in section .rodata
 1 728 bytes in section .text
 
 1 728 bytes of CODE  memory
     8 bytes of CONST memory
    56 bytes of DATA  memory

Errors: none
Warnings: none
